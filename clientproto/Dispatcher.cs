// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dispatcher.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from dispatcher.proto</summary>
public static partial class DispatcherReflection {

  #region Descriptor
  /// <summary>File descriptor for dispatcher.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DispatcherReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBkaXNwYXRjaGVyLnByb3RvIm0KBVRoaW5nEg4KBkJ1ZmZlchgBIAEoDBIU",
          "CgxUb1BsYXllclVVSUQYAiABKAkSEQoJVG9Xb3JsZElEGAMgASgFEhEKCVRv",
          "TWFwVVVJRBgEIAEoBRIYChBUb1BsYXllclVVSURMaXN0GAUgAygJQhhaFklO",
          "U2VydmVyL3NyYy9wcm90by9tc2diBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Thing), global::Thing.Parser, new[]{ "Buffer", "ToPlayerUUID", "ToWorldID", "ToMapUUID", "ToPlayerUUIDList" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Thing : pb::IMessage<Thing> {
  private static readonly pb::MessageParser<Thing> _parser = new pb::MessageParser<Thing>(() => new Thing());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Thing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DispatcherReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing(Thing other) : this() {
    buffer_ = other.buffer_;
    toPlayerUUID_ = other.toPlayerUUID_;
    toWorldID_ = other.toWorldID_;
    toMapUUID_ = other.toMapUUID_;
    toPlayerUUIDList_ = other.toPlayerUUIDList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing Clone() {
    return new Thing(this);
  }

  /// <summary>Field number for the "Buffer" field.</summary>
  public const int BufferFieldNumber = 1;
  private pb::ByteString buffer_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Buffer {
    get { return buffer_; }
    set {
      buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ToPlayerUUID" field.</summary>
  public const int ToPlayerUUIDFieldNumber = 2;
  private string toPlayerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ToPlayerUUID {
    get { return toPlayerUUID_; }
    set {
      toPlayerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ToWorldID" field.</summary>
  public const int ToWorldIDFieldNumber = 3;
  private int toWorldID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToWorldID {
    get { return toWorldID_; }
    set {
      toWorldID_ = value;
    }
  }

  /// <summary>Field number for the "ToMapUUID" field.</summary>
  public const int ToMapUUIDFieldNumber = 4;
  private int toMapUUID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToMapUUID {
    get { return toMapUUID_; }
    set {
      toMapUUID_ = value;
    }
  }

  /// <summary>Field number for the "ToPlayerUUIDList" field.</summary>
  public const int ToPlayerUUIDListFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_toPlayerUUIDList_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> toPlayerUUIDList_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ToPlayerUUIDList {
    get { return toPlayerUUIDList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Thing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Thing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Buffer != other.Buffer) return false;
    if (ToPlayerUUID != other.ToPlayerUUID) return false;
    if (ToWorldID != other.ToWorldID) return false;
    if (ToMapUUID != other.ToMapUUID) return false;
    if(!toPlayerUUIDList_.Equals(other.toPlayerUUIDList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
    if (ToPlayerUUID.Length != 0) hash ^= ToPlayerUUID.GetHashCode();
    if (ToWorldID != 0) hash ^= ToWorldID.GetHashCode();
    if (ToMapUUID != 0) hash ^= ToMapUUID.GetHashCode();
    hash ^= toPlayerUUIDList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Buffer.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Buffer);
    }
    if (ToPlayerUUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ToPlayerUUID);
    }
    if (ToWorldID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ToWorldID);
    }
    if (ToMapUUID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ToMapUUID);
    }
    toPlayerUUIDList_.WriteTo(output, _repeated_toPlayerUUIDList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Buffer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
    }
    if (ToPlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ToPlayerUUID);
    }
    if (ToWorldID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToWorldID);
    }
    if (ToMapUUID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToMapUUID);
    }
    size += toPlayerUUIDList_.CalculateSize(_repeated_toPlayerUUIDList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Thing other) {
    if (other == null) {
      return;
    }
    if (other.Buffer.Length != 0) {
      Buffer = other.Buffer;
    }
    if (other.ToPlayerUUID.Length != 0) {
      ToPlayerUUID = other.ToPlayerUUID;
    }
    if (other.ToWorldID != 0) {
      ToWorldID = other.ToWorldID;
    }
    if (other.ToMapUUID != 0) {
      ToMapUUID = other.ToMapUUID;
    }
    toPlayerUUIDList_.Add(other.toPlayerUUIDList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Buffer = input.ReadBytes();
          break;
        }
        case 18: {
          ToPlayerUUID = input.ReadString();
          break;
        }
        case 24: {
          ToWorldID = input.ReadInt32();
          break;
        }
        case 32: {
          ToMapUUID = input.ReadInt32();
          break;
        }
        case 42: {
          toPlayerUUIDList_.AddEntriesFrom(input, _repeated_toPlayerUUIDList_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
