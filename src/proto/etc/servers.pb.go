// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servers.proto

package etc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GateConfig struct {
	Port                 int32    `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	OutOfDateTimeout     int64    `protobuf:"varint,2,opt,name=OutOfDateTimeout,proto3" json:"OutOfDateTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GateConfig) Reset()         { *m = GateConfig{} }
func (m *GateConfig) String() string { return proto.CompactTextString(m) }
func (*GateConfig) ProtoMessage()    {}
func (*GateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{0}
}
func (m *GateConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateConfig.Merge(m, src)
}
func (m *GateConfig) XXX_Size() int {
	return m.Size()
}
func (m *GateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GateConfig proto.InternalMessageInfo

func (m *GateConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GateConfig) GetOutOfDateTimeout() int64 {
	if m != nil {
		return m.OutOfDateTimeout
	}
	return 0
}

type LoginConfig struct {
	Port                 int32     `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Database             *Database `protobuf:"bytes,2,opt,name=Database,proto3" json:"Database,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LoginConfig) Reset()         { *m = LoginConfig{} }
func (m *LoginConfig) String() string { return proto.CompactTextString(m) }
func (*LoginConfig) ProtoMessage()    {}
func (*LoginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{1}
}
func (m *LoginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginConfig.Merge(m, src)
}
func (m *LoginConfig) XXX_Size() int {
	return m.Size()
}
func (m *LoginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoginConfig proto.InternalMessageInfo

func (m *LoginConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *LoginConfig) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

type ChatConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatConfig) Reset()         { *m = ChatConfig{} }
func (m *ChatConfig) String() string { return proto.CompactTextString(m) }
func (*ChatConfig) ProtoMessage()    {}
func (*ChatConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{2}
}
func (m *ChatConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatConfig.Merge(m, src)
}
func (m *ChatConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChatConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChatConfig proto.InternalMessageInfo

type DatabaseConfig struct {
	Database             *Database `protobuf:"bytes,1,opt,name=Database,proto3" json:"Database,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DatabaseConfig) Reset()         { *m = DatabaseConfig{} }
func (m *DatabaseConfig) String() string { return proto.CompactTextString(m) }
func (*DatabaseConfig) ProtoMessage()    {}
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{3}
}
func (m *DatabaseConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatabaseConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatabaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseConfig.Merge(m, src)
}
func (m *DatabaseConfig) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseConfig proto.InternalMessageInfo

func (m *DatabaseConfig) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

type WebConfig struct {
	Port                 int32    `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebConfig) Reset()         { *m = WebConfig{} }
func (m *WebConfig) String() string { return proto.CompactTextString(m) }
func (*WebConfig) ProtoMessage()    {}
func (*WebConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{4}
}
func (m *WebConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebConfig.Merge(m, src)
}
func (m *WebConfig) XXX_Size() int {
	return m.Size()
}
func (m *WebConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WebConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WebConfig proto.InternalMessageInfo

func (m *WebConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ZoneWorld struct {
	ZoneID               int32    `protobuf:"varint,1,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	StaticMaps           []int32  `protobuf:"varint,2,rep,packed,name=StaticMaps,proto3" json:"StaticMaps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZoneWorld) Reset()         { *m = ZoneWorld{} }
func (m *ZoneWorld) String() string { return proto.CompactTextString(m) }
func (*ZoneWorld) ProtoMessage()    {}
func (*ZoneWorld) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{5}
}
func (m *ZoneWorld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneWorld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneWorld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneWorld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneWorld.Merge(m, src)
}
func (m *ZoneWorld) XXX_Size() int {
	return m.Size()
}
func (m *ZoneWorld) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneWorld.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneWorld proto.InternalMessageInfo

func (m *ZoneWorld) GetZoneID() int32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *ZoneWorld) GetStaticMaps() []int32 {
	if m != nil {
		return m.StaticMaps
	}
	return nil
}

type WorldConfig struct {
	Zones                []*ZoneWorld `protobuf:"bytes,1,rep,name=Zones,proto3" json:"Zones,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WorldConfig) Reset()         { *m = WorldConfig{} }
func (m *WorldConfig) String() string { return proto.CompactTextString(m) }
func (*WorldConfig) ProtoMessage()    {}
func (*WorldConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{6}
}
func (m *WorldConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorldConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorldConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorldConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorldConfig.Merge(m, src)
}
func (m *WorldConfig) XXX_Size() int {
	return m.Size()
}
func (m *WorldConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WorldConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WorldConfig proto.InternalMessageInfo

func (m *WorldConfig) GetZones() []*ZoneWorld {
	if m != nil {
		return m.Zones
	}
	return nil
}

type ServerConfig struct {
	GateConfig           *GateConfig     `protobuf:"bytes,1,opt,name=GateConfig,proto3" json:"GateConfig,omitempty"`
	LoginConfig          *LoginConfig    `protobuf:"bytes,2,opt,name=LoginConfig,proto3" json:"LoginConfig,omitempty"`
	ChatConfig           *ChatConfig     `protobuf:"bytes,3,opt,name=ChatConfig,proto3" json:"ChatConfig,omitempty"`
	DatabaseConfig       *DatabaseConfig `protobuf:"bytes,4,opt,name=DatabaseConfig,proto3" json:"DatabaseConfig,omitempty"`
	WebConfig            *WebConfig      `protobuf:"bytes,5,opt,name=WebConfig,proto3" json:"WebConfig,omitempty"`
	WorldConfig          *WorldConfig    `protobuf:"bytes,6,opt,name=WorldConfig,proto3" json:"WorldConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServerConfig) Reset()         { *m = ServerConfig{} }
func (m *ServerConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()    {}
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{7}
}
func (m *ServerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig.Merge(m, src)
}
func (m *ServerConfig) XXX_Size() int {
	return m.Size()
}
func (m *ServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig proto.InternalMessageInfo

func (m *ServerConfig) GetGateConfig() *GateConfig {
	if m != nil {
		return m.GateConfig
	}
	return nil
}

func (m *ServerConfig) GetLoginConfig() *LoginConfig {
	if m != nil {
		return m.LoginConfig
	}
	return nil
}

func (m *ServerConfig) GetChatConfig() *ChatConfig {
	if m != nil {
		return m.ChatConfig
	}
	return nil
}

func (m *ServerConfig) GetDatabaseConfig() *DatabaseConfig {
	if m != nil {
		return m.DatabaseConfig
	}
	return nil
}

func (m *ServerConfig) GetWebConfig() *WebConfig {
	if m != nil {
		return m.WebConfig
	}
	return nil
}

func (m *ServerConfig) GetWorldConfig() *WorldConfig {
	if m != nil {
		return m.WorldConfig
	}
	return nil
}

type Server struct {
	ServerID             int32         `protobuf:"varint,1,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	ServerType           string        `protobuf:"bytes,2,opt,name=ServerType,proto3" json:"ServerType,omitempty"`
	ServerConfig         *ServerConfig `protobuf:"bytes,3,opt,name=ServerConfig,proto3" json:"ServerConfig,omitempty"`
	Describe             string        `protobuf:"bytes,4,opt,name=Describe,proto3" json:"Describe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{8}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return m.Size()
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *Server) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func (m *Server) GetServerConfig() *ServerConfig {
	if m != nil {
		return m.ServerConfig
	}
	return nil
}

func (m *Server) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

type ServerList struct {
	Servers              []*Server `protobuf:"bytes,1,rep,name=Servers,proto3" json:"Servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ServerList) Reset()         { *m = ServerList{} }
func (m *ServerList) String() string { return proto.CompactTextString(m) }
func (*ServerList) ProtoMessage()    {}
func (*ServerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6eaaceba9c5e837, []int{9}
}
func (m *ServerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerList.Merge(m, src)
}
func (m *ServerList) XXX_Size() int {
	return m.Size()
}
func (m *ServerList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerList.DiscardUnknown(m)
}

var xxx_messageInfo_ServerList proto.InternalMessageInfo

func (m *ServerList) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*GateConfig)(nil), "GateConfig")
	proto.RegisterType((*LoginConfig)(nil), "LoginConfig")
	proto.RegisterType((*ChatConfig)(nil), "ChatConfig")
	proto.RegisterType((*DatabaseConfig)(nil), "DatabaseConfig")
	proto.RegisterType((*WebConfig)(nil), "WebConfig")
	proto.RegisterType((*ZoneWorld)(nil), "ZoneWorld")
	proto.RegisterType((*WorldConfig)(nil), "WorldConfig")
	proto.RegisterType((*ServerConfig)(nil), "ServerConfig")
	proto.RegisterType((*Server)(nil), "Server")
	proto.RegisterType((*ServerList)(nil), "ServerList")
}

func init() { proto.RegisterFile("servers.proto", fileDescriptor_a6eaaceba9c5e837) }

var fileDescriptor_a6eaaceba9c5e837 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x71, 0xbb, 0x66, 0xcd, 0x49, 0x37, 0x90, 0x2f, 0x26, 0xab, 0x17, 0x21, 0x58, 0x42,
	0x8a, 0x98, 0xe4, 0x88, 0x71, 0xc1, 0x3d, 0x8d, 0x04, 0x93, 0x0a, 0x43, 0xde, 0xa4, 0x49, 0xbb,
	0x73, 0x32, 0x6f, 0x44, 0x82, 0xba, 0x8a, 0x3d, 0x24, 0x9e, 0x83, 0x1b, 0xde, 0x81, 0x17, 0xe1,
	0x92, 0x47, 0x40, 0xe5, 0x45, 0xd0, 0x6c, 0x27, 0x73, 0x98, 0xba, 0xbb, 0x73, 0xbe, 0xe3, 0xf3,
	0xdb, 0xfd, 0xff, 0x06, 0xf6, 0xb4, 0x6c, 0xbf, 0xca, 0x56, 0xb3, 0x75, 0xab, 0x8c, 0x9a, 0xef,
	0x5f, 0x0a, 0x23, 0x2a, 0xa1, 0xa5, 0xeb, 0xe9, 0x12, 0xe0, 0xad, 0x30, 0x72, 0xa1, 0x56, 0x57,
	0xcd, 0x35, 0xc6, 0xb0, 0xf3, 0x51, 0xb5, 0x86, 0xa0, 0x0c, 0xe5, 0x13, 0x6e, 0x6b, 0xfc, 0x02,
	0x9e, 0x9c, 0xdc, 0x98, 0x93, 0xab, 0x52, 0x18, 0x79, 0xd6, 0x7c, 0x91, 0xea, 0xc6, 0x90, 0x51,
	0x86, 0xf2, 0x31, 0xbf, 0xc7, 0xe9, 0x3b, 0x48, 0x96, 0xea, 0xba, 0x59, 0x3d, 0x20, 0xf7, 0x1c,
	0xa6, 0xa5, 0x7f, 0x82, 0x95, 0x49, 0x8e, 0x62, 0xd6, 0x01, 0xde, 0x8f, 0xe8, 0x0c, 0x60, 0xf1,
	0x49, 0x18, 0x27, 0x44, 0x5f, 0xc3, 0x7e, 0x37, 0xf1, 0xd2, 0xa1, 0x0c, 0xda, 0x2e, 0xf3, 0x14,
	0xe2, 0x73, 0x59, 0x6d, 0x7f, 0x0e, 0x5d, 0x40, 0x7c, 0xa1, 0x56, 0xf2, 0x5c, 0xb5, 0x9f, 0x2f,
	0xf1, 0x01, 0x44, 0xb7, 0xcd, 0x71, 0xe9, 0x8f, 0xf8, 0x0e, 0xa7, 0x00, 0xa7, 0x46, 0x98, 0xa6,
	0x7e, 0x2f, 0xd6, 0x9a, 0x8c, 0xb2, 0x71, 0x3e, 0xe1, 0x01, 0xa1, 0x05, 0x24, 0x56, 0xc0, 0xdf,
	0x93, 0xc1, 0xe4, 0x76, 0x51, 0x13, 0x94, 0x8d, 0xf3, 0xe4, 0x08, 0x58, 0x7f, 0x03, 0x77, 0x03,
	0xfa, 0x73, 0x04, 0xb3, 0x53, 0x9b, 0x8b, 0x5f, 0x39, 0x0c, 0x63, 0xf0, 0x3f, 0x28, 0x61, 0x77,
	0x88, 0x87, 0x29, 0xb1, 0x81, 0xcb, 0xde, 0xc5, 0x19, 0x0b, 0x18, 0x1f, 0xc4, 0x70, 0x18, 0x7a,
	0x49, 0xc6, 0x5e, 0xfc, 0x0e, 0xf1, 0x60, 0x8c, 0xef, 0x59, 0x4d, 0x76, 0xec, 0xc2, 0x63, 0x36,
	0xc4, 0xfc, 0xff, 0x44, 0xf2, 0xc0, 0x6a, 0x32, 0xb1, 0x3b, 0xc0, 0x7a, 0xc2, 0x83, 0x1c, 0xd8,
	0xc0, 0x2e, 0x12, 0xf9, 0xf7, 0x07, 0x8c, 0x87, 0x07, 0xe8, 0x77, 0x04, 0x91, 0x73, 0x0b, 0xcf,
	0x61, 0xea, 0xaa, 0x3e, 0xa3, 0xbe, 0xb7, 0x29, 0xd9, 0xfa, 0xec, 0xdb, 0xda, 0xfd, 0xb7, 0x62,
	0x1e, 0x10, 0xfc, 0x72, 0xe8, 0xb9, 0x37, 0x62, 0x8f, 0x85, 0x90, 0x0f, 0x63, 0x99, 0xc3, 0xb4,
	0x94, 0xba, 0x6e, 0x9b, 0x4a, 0x5a, 0x1b, 0x62, 0xde, 0xf7, 0xb4, 0xe8, 0xae, 0x5b, 0x36, 0xda,
	0xe0, 0x67, 0xb0, 0xeb, 0xba, 0x2e, 0xf5, 0x5d, 0xaf, 0xcb, 0x3b, 0xfe, 0x26, 0xff, 0xb5, 0x49,
	0xd1, 0xef, 0x4d, 0x8a, 0xfe, 0x6c, 0x52, 0xf4, 0xe3, 0x6f, 0xfa, 0xe8, 0xe2, 0xe0, 0xf8, 0x83,
	0x1b, 0x16, 0xba, 0xad, 0x0b, 0xfb, 0x41, 0x16, 0xd2, 0xd4, 0x55, 0x64, 0xcb, 0x57, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf5, 0xec, 0xe4, 0x83, 0xbc, 0x03, 0x00, 0x00,
}

func (m *GateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutOfDateTimeout != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.OutOfDateTimeout))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Port != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DatabaseConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZoneWorld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneWorld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneWorld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StaticMaps) > 0 {
		dAtA4 := make([]byte, len(m.StaticMaps)*10)
		var j3 int
		for _, num1 := range m.StaticMaps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintServers(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.ZoneID != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.ZoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorldConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorldConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorldConfig != nil {
		{
			size, err := m.WorldConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.WebConfig != nil {
		{
			size, err := m.WebConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DatabaseConfig != nil {
		{
			size, err := m.DatabaseConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ChatConfig != nil {
		{
			size, err := m.ChatConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LoginConfig != nil {
		{
			size, err := m.LoginConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GateConfig != nil {
		{
			size, err := m.GateConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Server) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Describe) > 0 {
		i -= len(m.Describe)
		copy(dAtA[i:], m.Describe)
		i = encodeVarintServers(dAtA, i, uint64(len(m.Describe)))
		i--
		dAtA[i] = 0x22
	}
	if m.ServerConfig != nil {
		{
			size, err := m.ServerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerType) > 0 {
		i -= len(m.ServerType)
		copy(dAtA[i:], m.ServerType)
		i = encodeVarintServers(dAtA, i, uint64(len(m.ServerType)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServerID != 0 {
		i = encodeVarintServers(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintServers(dAtA []byte, offset int, v uint64) int {
	offset -= sovServers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovServers(uint64(m.Port))
	}
	if m.OutOfDateTimeout != 0 {
		n += 1 + sovServers(uint64(m.OutOfDateTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovServers(uint64(m.Port))
	}
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatabaseConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovServers(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZoneWorld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZoneID != 0 {
		n += 1 + sovServers(uint64(m.ZoneID))
	}
	if len(m.StaticMaps) > 0 {
		l = 0
		for _, e := range m.StaticMaps {
			l += sovServers(uint64(e))
		}
		n += 1 + sovServers(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorldConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovServers(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GateConfig != nil {
		l = m.GateConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.LoginConfig != nil {
		l = m.LoginConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.ChatConfig != nil {
		l = m.ChatConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.DatabaseConfig != nil {
		l = m.DatabaseConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.WebConfig != nil {
		l = m.WebConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.WorldConfig != nil {
		l = m.WorldConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerID != 0 {
		n += 1 + sovServers(uint64(m.ServerID))
	}
	l = len(m.ServerType)
	if l > 0 {
		n += 1 + l + sovServers(uint64(l))
	}
	if m.ServerConfig != nil {
		l = m.ServerConfig.Size()
		n += 1 + l + sovServers(uint64(l))
	}
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovServers(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovServers(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServers(x uint64) (n int) {
	return sovServers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfDateTimeout", wireType)
			}
			m.OutOfDateTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutOfDateTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &Database{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &Database{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneWorld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneWorld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneWorld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StaticMaps = append(m.StaticMaps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServers
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServers
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StaticMaps) == 0 {
					m.StaticMaps = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StaticMaps = append(m.StaticMaps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMaps", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &ZoneWorld{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GateConfig == nil {
				m.GateConfig = &GateConfig{}
			}
			if err := m.GateConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginConfig == nil {
				m.LoginConfig = &LoginConfig{}
			}
			if err := m.LoginConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChatConfig == nil {
				m.ChatConfig = &ChatConfig{}
			}
			if err := m.ChatConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DatabaseConfig == nil {
				m.DatabaseConfig = &DatabaseConfig{}
			}
			if err := m.DatabaseConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebConfig == nil {
				m.WebConfig = &WebConfig{}
			}
			if err := m.WebConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorldConfig == nil {
				m.WorldConfig = &WorldConfig{}
			}
			if err := m.WorldConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerConfig == nil {
				m.ServerConfig = &ServerConfig{}
			}
			if err := m.ServerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &Server{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServers = fmt.Errorf("proto: unexpected end of group")
)
