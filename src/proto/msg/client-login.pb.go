// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client-login.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CLLogon struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PasswordHash         string   `protobuf:"bytes,2,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLLogon) Reset()         { *m = CLLogon{} }
func (m *CLLogon) String() string { return proto.CompactTextString(m) }
func (*CLLogon) ProtoMessage()    {}
func (*CLLogon) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c4cab8404c81eb, []int{0}
}
func (m *CLLogon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLLogon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLLogon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLLogon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLLogon.Merge(m, src)
}
func (m *CLLogon) XXX_Size() int {
	return m.Size()
}
func (m *CLLogon) XXX_DiscardUnknown() {
	xxx_messageInfo_CLLogon.DiscardUnknown(m)
}

var xxx_messageInfo_CLLogon proto.InternalMessageInfo

func (m *CLLogon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLLogon) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

type CLLogin struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PasswordHash         string   `protobuf:"bytes,2,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLLogin) Reset()         { *m = CLLogin{} }
func (m *CLLogin) String() string { return proto.CompactTextString(m) }
func (*CLLogin) ProtoMessage()    {}
func (*CLLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c4cab8404c81eb, []int{1}
}
func (m *CLLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLLogin.Merge(m, src)
}
func (m *CLLogin) XXX_Size() int {
	return m.Size()
}
func (m *CLLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_CLLogin.DiscardUnknown(m)
}

var xxx_messageInfo_CLLogin proto.InternalMessageInfo

func (m *CLLogin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLLogin) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

type CLChangePassword struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	OldPasswordHash      string   `protobuf:"bytes,2,opt,name=OldPasswordHash,proto3" json:"OldPasswordHash,omitempty"`
	NewPasswordHash      string   `protobuf:"bytes,3,opt,name=NewPasswordHash,proto3" json:"NewPasswordHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLChangePassword) Reset()         { *m = CLChangePassword{} }
func (m *CLChangePassword) String() string { return proto.CompactTextString(m) }
func (*CLChangePassword) ProtoMessage()    {}
func (*CLChangePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c4cab8404c81eb, []int{2}
}
func (m *CLChangePassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLChangePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLChangePassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLChangePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLChangePassword.Merge(m, src)
}
func (m *CLChangePassword) XXX_Size() int {
	return m.Size()
}
func (m *CLChangePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_CLChangePassword.DiscardUnknown(m)
}

var xxx_messageInfo_CLChangePassword proto.InternalMessageInfo

func (m *CLChangePassword) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLChangePassword) GetOldPasswordHash() string {
	if m != nil {
		return m.OldPasswordHash
	}
	return ""
}

func (m *CLChangePassword) GetNewPasswordHash() string {
	if m != nil {
		return m.NewPasswordHash
	}
	return ""
}

type ClientToLogin struct {
	Logon                *CLLogon          `protobuf:"bytes,1,opt,name=Logon,proto3" json:"Logon,omitempty"`
	Login                *CLLogin          `protobuf:"bytes,2,opt,name=Login,proto3" json:"Login,omitempty"`
	ChangePassword       *CLChangePassword `protobuf:"bytes,3,opt,name=ChangePassword,proto3" json:"ChangePassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClientToLogin) Reset()         { *m = ClientToLogin{} }
func (m *ClientToLogin) String() string { return proto.CompactTextString(m) }
func (*ClientToLogin) ProtoMessage()    {}
func (*ClientToLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c4cab8404c81eb, []int{3}
}
func (m *ClientToLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientToLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientToLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientToLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientToLogin.Merge(m, src)
}
func (m *ClientToLogin) XXX_Size() int {
	return m.Size()
}
func (m *ClientToLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientToLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ClientToLogin proto.InternalMessageInfo

func (m *ClientToLogin) GetLogon() *CLLogon {
	if m != nil {
		return m.Logon
	}
	return nil
}

func (m *ClientToLogin) GetLogin() *CLLogin {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *ClientToLogin) GetChangePassword() *CLChangePassword {
	if m != nil {
		return m.ChangePassword
	}
	return nil
}

type LoginToClient struct {
	Success              bool         `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	SessionCert          *SessionCert `protobuf:"bytes,2,opt,name=SessionCert,proto3" json:"SessionCert,omitempty"`
	GateIP               string       `protobuf:"bytes,3,opt,name=GateIP,proto3" json:"GateIP,omitempty"`
	GatePort             int32        `protobuf:"varint,4,opt,name=GatePort,proto3" json:"GatePort,omitempty"`
	GateWebPort          int32        `protobuf:"varint,5,opt,name=GateWebPort,proto3" json:"GateWebPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LoginToClient) Reset()         { *m = LoginToClient{} }
func (m *LoginToClient) String() string { return proto.CompactTextString(m) }
func (*LoginToClient) ProtoMessage()    {}
func (*LoginToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c4cab8404c81eb, []int{4}
}
func (m *LoginToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginToClient.Merge(m, src)
}
func (m *LoginToClient) XXX_Size() int {
	return m.Size()
}
func (m *LoginToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginToClient.DiscardUnknown(m)
}

var xxx_messageInfo_LoginToClient proto.InternalMessageInfo

func (m *LoginToClient) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginToClient) GetSessionCert() *SessionCert {
	if m != nil {
		return m.SessionCert
	}
	return nil
}

func (m *LoginToClient) GetGateIP() string {
	if m != nil {
		return m.GateIP
	}
	return ""
}

func (m *LoginToClient) GetGatePort() int32 {
	if m != nil {
		return m.GatePort
	}
	return 0
}

func (m *LoginToClient) GetGateWebPort() int32 {
	if m != nil {
		return m.GateWebPort
	}
	return 0
}

func init() {
	proto.RegisterType((*CLLogon)(nil), "CLLogon")
	proto.RegisterType((*CLLogin)(nil), "CLLogin")
	proto.RegisterType((*CLChangePassword)(nil), "CLChangePassword")
	proto.RegisterType((*ClientToLogin)(nil), "ClientToLogin")
	proto.RegisterType((*LoginToClient)(nil), "LoginToClient")
}

func init() { proto.RegisterFile("client-login.proto", fileDescriptor_d9c4cab8404c81eb) }

var fileDescriptor_d9c4cab8404c81eb = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0xc6, 0x1d, 0xe5, 0x9f, 0xaf, 0xa0, 0x32, 0x0b, 0xd2, 0xb0, 0x68, 0x48, 0x57, 0xdd, 0x58,
	0x12, 0x5c, 0xb9, 0xd4, 0x2e, 0x94, 0x84, 0x20, 0x29, 0x24, 0x26, 0xee, 0x4a, 0x99, 0x94, 0x49,
	0x60, 0xc6, 0xcc, 0x54, 0x49, 0x3c, 0x82, 0x27, 0xf0, 0x16, 0x5e, 0xc3, 0xa5, 0x47, 0x30, 0x78,
	0x11, 0xc3, 0xeb, 0x40, 0x68, 0xc3, 0xca, 0xdd, 0x9b, 0xdf, 0xf7, 0xe5, 0x7b, 0x7f, 0x32, 0x40,
	0xe3, 0x05, 0x67, 0x22, 0xbd, 0x5c, 0xc8, 0x84, 0x0b, 0xff, 0x59, 0xc9, 0x54, 0xb6, 0x9b, 0x86,
	0x25, 0x51, 0xca, 0x32, 0xe4, 0xde, 0x40, 0x35, 0x18, 0x0c, 0x64, 0x22, 0x05, 0xa5, 0x50, 0x1a,
	0x46, 0x4b, 0x66, 0x93, 0x0e, 0xf1, 0x4e, 0x43, 0xac, 0xa9, 0x0b, 0xf5, 0x51, 0xa4, 0xf5, 0x4a,
	0xaa, 0xd9, 0x7d, 0xa4, 0xe7, 0xf6, 0x31, 0x6a, 0x39, 0xb6, 0x8b, 0xe0, 0xff, 0x8f, 0x78, 0x83,
	0x8b, 0x60, 0x10, 0xcc, 0x23, 0x91, 0xb0, 0x2d, 0x3f, 0x98, 0xe5, 0xc1, 0xf9, 0xc3, 0x62, 0x76,
	0x20, 0xae, 0x88, 0x37, 0xce, 0x21, 0x5b, 0xe5, 0x9c, 0x27, 0x99, 0xb3, 0x80, 0xdd, 0x77, 0x02,
	0x8d, 0x00, 0xef, 0x32, 0x91, 0xd9, 0x16, 0x0e, 0x94, 0xf1, 0x22, 0xd8, 0xda, 0xea, 0xd5, 0x7c,
	0x73, 0xa1, 0x30, 0xc3, 0x46, 0xe7, 0x02, 0x7b, 0xef, 0x74, 0x9e, 0xe9, 0x5c, 0xd0, 0x6b, 0x38,
	0xcb, 0xef, 0x82, 0xad, 0xad, 0x5e, 0xd3, 0x2f, 0x2e, 0x19, 0x16, 0x8c, 0xee, 0x27, 0x81, 0x06,
	0x86, 0x4c, 0x64, 0x36, 0x13, 0xb5, 0xa1, 0x3a, 0x7e, 0x89, 0x63, 0xa6, 0x35, 0x8e, 0x53, 0x0b,
	0xb7, 0x4f, 0xea, 0x83, 0x35, 0x66, 0x5a, 0x73, 0x29, 0x02, 0xa6, 0x52, 0x33, 0x4c, 0xdd, 0xdf,
	0x63, 0xe1, 0xbe, 0x81, 0xb6, 0xa0, 0x72, 0x17, 0xa5, 0xac, 0x3f, 0x32, 0x97, 0x30, 0x2f, 0xda,
	0x86, 0xda, 0xa6, 0x1a, 0x49, 0x95, 0xda, 0xa5, 0x0e, 0xf1, 0xca, 0xe1, 0xee, 0x4d, 0x3b, 0x60,
	0x6d, 0xea, 0x47, 0x36, 0x45, 0xb9, 0x8c, 0xf2, 0x3e, 0xba, 0xf5, 0xbe, 0xd6, 0x0e, 0xf9, 0x5e,
	0x3b, 0xe4, 0x67, 0xed, 0x90, 0x8f, 0x5f, 0xe7, 0xe8, 0xa9, 0xd5, 0x1f, 0x8e, 0x99, 0x7a, 0x65,
	0xaa, 0xab, 0x55, 0xdc, 0xc5, 0x6f, 0xd6, 0x5d, 0xea, 0x64, 0x5a, 0xc1, 0xf2, 0xea, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x67, 0x44, 0x90, 0x69, 0x9a, 0x02, 0x00, 0x00,
}

func (m *CLLogon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLLogon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLLogon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CLLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CLChangePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLChangePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLChangePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewPasswordHash) > 0 {
		i -= len(m.NewPasswordHash)
		copy(dAtA[i:], m.NewPasswordHash)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.NewPasswordHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldPasswordHash) > 0 {
		i -= len(m.OldPasswordHash)
		copy(dAtA[i:], m.OldPasswordHash)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.OldPasswordHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientToLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientToLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientToLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePassword != nil {
		{
			size, err := m.ChangePassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientLogin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Login != nil {
		{
			size, err := m.Login.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientLogin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Logon != nil {
		{
			size, err := m.Logon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientLogin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GateWebPort != 0 {
		i = encodeVarintClientLogin(dAtA, i, uint64(m.GateWebPort))
		i--
		dAtA[i] = 0x28
	}
	if m.GatePort != 0 {
		i = encodeVarintClientLogin(dAtA, i, uint64(m.GatePort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GateIP) > 0 {
		i -= len(m.GateIP)
		copy(dAtA[i:], m.GateIP)
		i = encodeVarintClientLogin(dAtA, i, uint64(len(m.GateIP)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionCert != nil {
		{
			size, err := m.SessionCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientLogin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientLogin(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientLogin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CLLogon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CLLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CLChangePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	l = len(m.OldPasswordHash)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	l = len(m.NewPasswordHash)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientToLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Logon != nil {
		l = m.Logon.Size()
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.Login != nil {
		l = m.Login.Size()
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.ChangePassword != nil {
		l = m.ChangePassword.Size()
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.SessionCert != nil {
		l = m.SessionCert.Size()
		n += 1 + l + sovClientLogin(uint64(l))
	}
	l = len(m.GateIP)
	if l > 0 {
		n += 1 + l + sovClientLogin(uint64(l))
	}
	if m.GatePort != 0 {
		n += 1 + sovClientLogin(uint64(m.GatePort))
	}
	if m.GateWebPort != 0 {
		n += 1 + sovClientLogin(uint64(m.GateWebPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientLogin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientLogin(x uint64) (n int) {
	return sovClientLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CLLogon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLLogon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLLogon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLChangePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLChangePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLChangePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientToLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientToLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientToLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logon == nil {
				m.Logon = &CLLogon{}
			}
			if err := m.Logon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Login == nil {
				m.Login = &CLLogin{}
			}
			if err := m.Login.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePassword == nil {
				m.ChangePassword = &CLChangePassword{}
			}
			if err := m.ChangePassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionCert == nil {
				m.SessionCert = &SessionCert{}
			}
			if err := m.SessionCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatePort", wireType)
			}
			m.GatePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateWebPort", wireType)
			}
			m.GateWebPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateWebPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientLogin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientLogin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientLogin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientLogin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientLogin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientLogin = fmt.Errorf("proto: unexpected end of group")
)
