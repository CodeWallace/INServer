// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client-chat.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatType int32

const (
	ChatType_LOCAL   ChatType = 0
	ChatType_WORLD   ChatType = 1
	ChatType_PRIVATE ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "LOCAL",
	1: "WORLD",
	3: "PRIVATE",
}

var ChatType_value = map[string]int32{
	"LOCAL":   0,
	"WORLD":   1,
	"PRIVATE": 3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9f1f91501c061ef, []int{0}
}

type ClientToChat struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=ChatType" json:"ChatType,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ReceiverUUID         string   `protobuf:"bytes,3,opt,name=ReceiverUUID,proto3" json:"ReceiverUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientToChat) Reset()         { *m = ClientToChat{} }
func (m *ClientToChat) String() string { return proto.CompactTextString(m) }
func (*ClientToChat) ProtoMessage()    {}
func (*ClientToChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9f1f91501c061ef, []int{0}
}
func (m *ClientToChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientToChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientToChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientToChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientToChat.Merge(m, src)
}
func (m *ClientToChat) XXX_Size() int {
	return m.Size()
}
func (m *ClientToChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientToChat.DiscardUnknown(m)
}

var xxx_messageInfo_ClientToChat proto.InternalMessageInfo

func (m *ClientToChat) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_LOCAL
}

func (m *ClientToChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ClientToChat) GetReceiverUUID() string {
	if m != nil {
		return m.ReceiverUUID
	}
	return ""
}

type ChatToClient struct {
	ChatType             ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=ChatType" json:"ChatType,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	SenderUUID           string   `protobuf:"bytes,3,opt,name=SenderUUID,proto3" json:"SenderUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatToClient) Reset()         { *m = ChatToClient{} }
func (m *ChatToClient) String() string { return proto.CompactTextString(m) }
func (*ChatToClient) ProtoMessage()    {}
func (*ChatToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9f1f91501c061ef, []int{1}
}
func (m *ChatToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatToClient.Merge(m, src)
}
func (m *ChatToClient) XXX_Size() int {
	return m.Size()
}
func (m *ChatToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatToClient.DiscardUnknown(m)
}

var xxx_messageInfo_ChatToClient proto.InternalMessageInfo

func (m *ChatToClient) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_LOCAL
}

func (m *ChatToClient) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatToClient) GetSenderUUID() string {
	if m != nil {
		return m.SenderUUID
	}
	return ""
}

func init() {
	proto.RegisterEnum("ChatType", ChatType_name, ChatType_value)
	proto.RegisterType((*ClientToChat)(nil), "ClientToChat")
	proto.RegisterType((*ChatToClient)(nil), "ChatToClient")
}

func init() { proto.RegisterFile("client-chat.proto", fileDescriptor_e9f1f91501c061ef) }

var fileDescriptor_e9f1f91501c061ef = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x4d, 0xce, 0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x2a, 0xe6,
	0xe2, 0x71, 0x06, 0x0b, 0x86, 0xe4, 0x3b, 0x67, 0x24, 0x96, 0x08, 0xa9, 0x72, 0x71, 0x80, 0xe8,
	0x90, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x4e, 0x3d, 0x98, 0x40, 0x10,
	0x5c, 0x4a, 0x48, 0x82, 0x8b, 0xdd, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82, 0x49, 0x81,
	0x51, 0x83, 0x33, 0x08, 0xc6, 0x15, 0x52, 0xe2, 0xe2, 0x09, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b,
	0x2d, 0x0a, 0x0d, 0xf5, 0x74, 0x91, 0x60, 0x06, 0x4b, 0xa3, 0x88, 0x29, 0xe5, 0x73, 0xf1, 0x80,
	0x4d, 0xca, 0x87, 0x58, 0x4d, 0xb9, 0xa5, 0x72, 0x5c, 0x5c, 0xc1, 0xa9, 0x79, 0x29, 0x28, 0x56,
	0x22, 0x89, 0x68, 0xe9, 0x22, 0x2c, 0x10, 0xe2, 0xe4, 0x62, 0xf5, 0xf1, 0x77, 0x76, 0xf4, 0x11,
	0x60, 0x00, 0x31, 0xc3, 0xfd, 0x83, 0x7c, 0x5c, 0x04, 0x18, 0x85, 0xb8, 0xb9, 0xd8, 0x03, 0x82,
	0x3c, 0xc3, 0x1c, 0x43, 0x5c, 0x05, 0x98, 0x9d, 0x34, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48,
	0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0xc4, 0x3c, 0xfd, 0x82, 0x53,
	0x8b, 0xca, 0x52, 0x8b, 0xf4, 0x8b, 0x8b, 0x92, 0xf5, 0xc1, 0x41, 0xa7, 0x9f, 0x5b, 0x9c, 0x9e,
	0xc4, 0x06, 0x66, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0xc3, 0x4a, 0xfb, 0x5a, 0x01,
	0x00, 0x00,
}

func (m *ClientToChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientToChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientToChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReceiverUUID) > 0 {
		i -= len(m.ReceiverUUID)
		copy(dAtA[i:], m.ReceiverUUID)
		i = encodeVarintClientChat(dAtA, i, uint64(len(m.ReceiverUUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintClientChat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChatType != 0 {
		i = encodeVarintClientChat(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SenderUUID) > 0 {
		i -= len(m.SenderUUID)
		copy(dAtA[i:], m.SenderUUID)
		i = encodeVarintClientChat(dAtA, i, uint64(len(m.SenderUUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintClientChat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChatType != 0 {
		i = encodeVarintClientChat(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientChat(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientChat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientToChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovClientChat(uint64(m.ChatType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovClientChat(uint64(l))
	}
	l = len(m.ReceiverUUID)
	if l > 0 {
		n += 1 + l + sovClientChat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovClientChat(uint64(m.ChatType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovClientChat(uint64(l))
	}
	l = len(m.SenderUUID)
	if l > 0 {
		n += 1 + l + sovClientChat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientChat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientChat(x uint64) (n int) {
	return sovClientChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientToChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientToChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientToChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientChat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientChat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientChat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientChat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientChat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientChat = fmt.Errorf("proto: unexpected end of group")
)
