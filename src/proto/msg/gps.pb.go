// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gps.proto

package msg

import (
	data "INServer/src/proto/data"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateRoleAddressNTF struct {
	RoleUUID             string            `protobuf:"bytes,1,opt,name=RoleUUID,proto3" json:"RoleUUID,omitempty"`
	Address              *data.RoleAddress `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateRoleAddressNTF) Reset()         { *m = UpdateRoleAddressNTF{} }
func (m *UpdateRoleAddressNTF) String() string { return proto.CompactTextString(m) }
func (*UpdateRoleAddressNTF) ProtoMessage()    {}
func (*UpdateRoleAddressNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{0}
}
func (m *UpdateRoleAddressNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoleAddressNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoleAddressNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoleAddressNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoleAddressNTF.Merge(m, src)
}
func (m *UpdateRoleAddressNTF) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoleAddressNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoleAddressNTF.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoleAddressNTF proto.InternalMessageInfo

func (m *UpdateRoleAddressNTF) GetRoleUUID() string {
	if m != nil {
		return m.RoleUUID
	}
	return ""
}

func (m *UpdateRoleAddressNTF) GetAddress() *data.RoleAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type RemoveRoleAddressNTF struct {
	RoleUUID             string   `protobuf:"bytes,1,opt,name=RoleUUID,proto3" json:"RoleUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRoleAddressNTF) Reset()         { *m = RemoveRoleAddressNTF{} }
func (m *RemoveRoleAddressNTF) String() string { return proto.CompactTextString(m) }
func (*RemoveRoleAddressNTF) ProtoMessage()    {}
func (*RemoveRoleAddressNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{1}
}
func (m *RemoveRoleAddressNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRoleAddressNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRoleAddressNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRoleAddressNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRoleAddressNTF.Merge(m, src)
}
func (m *RemoveRoleAddressNTF) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRoleAddressNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRoleAddressNTF.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRoleAddressNTF proto.InternalMessageInfo

func (m *RemoveRoleAddressNTF) GetRoleUUID() string {
	if m != nil {
		return m.RoleUUID
	}
	return ""
}

type UpdateMapAddressNTF struct {
	MapUUID              string   `protobuf:"bytes,1,opt,name=MapUUID,proto3" json:"MapUUID,omitempty"`
	ServerID             int32    `protobuf:"varint,2,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapAddressNTF) Reset()         { *m = UpdateMapAddressNTF{} }
func (m *UpdateMapAddressNTF) String() string { return proto.CompactTextString(m) }
func (*UpdateMapAddressNTF) ProtoMessage()    {}
func (*UpdateMapAddressNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{2}
}
func (m *UpdateMapAddressNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMapAddressNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMapAddressNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMapAddressNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapAddressNTF.Merge(m, src)
}
func (m *UpdateMapAddressNTF) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMapAddressNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapAddressNTF.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapAddressNTF proto.InternalMessageInfo

func (m *UpdateMapAddressNTF) GetMapUUID() string {
	if m != nil {
		return m.MapUUID
	}
	return ""
}

func (m *UpdateMapAddressNTF) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

type RemoveMapAddressNTF struct {
	MapUUID              string   `protobuf:"bytes,1,opt,name=MapUUID,proto3" json:"MapUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveMapAddressNTF) Reset()         { *m = RemoveMapAddressNTF{} }
func (m *RemoveMapAddressNTF) String() string { return proto.CompactTextString(m) }
func (*RemoveMapAddressNTF) ProtoMessage()    {}
func (*RemoveMapAddressNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{3}
}
func (m *RemoveMapAddressNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMapAddressNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMapAddressNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMapAddressNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMapAddressNTF.Merge(m, src)
}
func (m *RemoveMapAddressNTF) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMapAddressNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMapAddressNTF.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMapAddressNTF proto.InternalMessageInfo

func (m *RemoveMapAddressNTF) GetMapUUID() string {
	if m != nil {
		return m.MapUUID
	}
	return ""
}

type GetMapAddressReq struct {
	MapUUID              string   `protobuf:"bytes,1,opt,name=MapUUID,proto3" json:"MapUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapAddressReq) Reset()         { *m = GetMapAddressReq{} }
func (m *GetMapAddressReq) String() string { return proto.CompactTextString(m) }
func (*GetMapAddressReq) ProtoMessage()    {}
func (*GetMapAddressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{4}
}
func (m *GetMapAddressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapAddressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapAddressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapAddressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapAddressReq.Merge(m, src)
}
func (m *GetMapAddressReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMapAddressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapAddressReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapAddressReq proto.InternalMessageInfo

func (m *GetMapAddressReq) GetMapUUID() string {
	if m != nil {
		return m.MapUUID
	}
	return ""
}

type GetMapAddressResp struct {
	ServerID             int32    `protobuf:"varint,1,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapAddressResp) Reset()         { *m = GetMapAddressResp{} }
func (m *GetMapAddressResp) String() string { return proto.CompactTextString(m) }
func (*GetMapAddressResp) ProtoMessage()    {}
func (*GetMapAddressResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{5}
}
func (m *GetMapAddressResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMapAddressResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMapAddressResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMapAddressResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapAddressResp.Merge(m, src)
}
func (m *GetMapAddressResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMapAddressResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapAddressResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapAddressResp proto.InternalMessageInfo

func (m *GetMapAddressResp) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

type UpdateStaticMapUUIDNTF struct {
	ZoneID               int32    `protobuf:"varint,1,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	StaticMapID          int32    `protobuf:"varint,2,opt,name=StaticMapID,proto3" json:"StaticMapID,omitempty"`
	StaticMapUUID        string   `protobuf:"bytes,3,opt,name=StaticMapUUID,proto3" json:"StaticMapUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStaticMapUUIDNTF) Reset()         { *m = UpdateStaticMapUUIDNTF{} }
func (m *UpdateStaticMapUUIDNTF) String() string { return proto.CompactTextString(m) }
func (*UpdateStaticMapUUIDNTF) ProtoMessage()    {}
func (*UpdateStaticMapUUIDNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{6}
}
func (m *UpdateStaticMapUUIDNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStaticMapUUIDNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStaticMapUUIDNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStaticMapUUIDNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStaticMapUUIDNTF.Merge(m, src)
}
func (m *UpdateStaticMapUUIDNTF) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStaticMapUUIDNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStaticMapUUIDNTF.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStaticMapUUIDNTF proto.InternalMessageInfo

func (m *UpdateStaticMapUUIDNTF) GetZoneID() int32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *UpdateStaticMapUUIDNTF) GetStaticMapID() int32 {
	if m != nil {
		return m.StaticMapID
	}
	return 0
}

func (m *UpdateStaticMapUUIDNTF) GetStaticMapUUID() string {
	if m != nil {
		return m.StaticMapUUID
	}
	return ""
}

type GetStaticMapUUIDReq struct {
	ZoneID               int32    `protobuf:"varint,1,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	StaticMapID          int32    `protobuf:"varint,2,opt,name=StaticMapID,proto3" json:"StaticMapID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStaticMapUUIDReq) Reset()         { *m = GetStaticMapUUIDReq{} }
func (m *GetStaticMapUUIDReq) String() string { return proto.CompactTextString(m) }
func (*GetStaticMapUUIDReq) ProtoMessage()    {}
func (*GetStaticMapUUIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{7}
}
func (m *GetStaticMapUUIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStaticMapUUIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStaticMapUUIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStaticMapUUIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStaticMapUUIDReq.Merge(m, src)
}
func (m *GetStaticMapUUIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStaticMapUUIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStaticMapUUIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStaticMapUUIDReq proto.InternalMessageInfo

func (m *GetStaticMapUUIDReq) GetZoneID() int32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *GetStaticMapUUIDReq) GetStaticMapID() int32 {
	if m != nil {
		return m.StaticMapID
	}
	return 0
}

type GetStaticMapUUIDResp struct {
	StaticMapUUID        string   `protobuf:"bytes,1,opt,name=StaticMapUUID,proto3" json:"StaticMapUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStaticMapUUIDResp) Reset()         { *m = GetStaticMapUUIDResp{} }
func (m *GetStaticMapUUIDResp) String() string { return proto.CompactTextString(m) }
func (*GetStaticMapUUIDResp) ProtoMessage()    {}
func (*GetStaticMapUUIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_126eb6f1d39e434c, []int{8}
}
func (m *GetStaticMapUUIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStaticMapUUIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStaticMapUUIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStaticMapUUIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStaticMapUUIDResp.Merge(m, src)
}
func (m *GetStaticMapUUIDResp) XXX_Size() int {
	return m.Size()
}
func (m *GetStaticMapUUIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStaticMapUUIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetStaticMapUUIDResp proto.InternalMessageInfo

func (m *GetStaticMapUUIDResp) GetStaticMapUUID() string {
	if m != nil {
		return m.StaticMapUUID
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateRoleAddressNTF)(nil), "UpdateRoleAddressNTF")
	proto.RegisterType((*RemoveRoleAddressNTF)(nil), "RemoveRoleAddressNTF")
	proto.RegisterType((*UpdateMapAddressNTF)(nil), "UpdateMapAddressNTF")
	proto.RegisterType((*RemoveMapAddressNTF)(nil), "RemoveMapAddressNTF")
	proto.RegisterType((*GetMapAddressReq)(nil), "GetMapAddressReq")
	proto.RegisterType((*GetMapAddressResp)(nil), "GetMapAddressResp")
	proto.RegisterType((*UpdateStaticMapUUIDNTF)(nil), "UpdateStaticMapUUIDNTF")
	proto.RegisterType((*GetStaticMapUUIDReq)(nil), "GetStaticMapUUIDReq")
	proto.RegisterType((*GetStaticMapUUIDResp)(nil), "GetStaticMapUUIDResp")
}

func init() { proto.RegisterFile("gps.proto", fileDescriptor_126eb6f1d39e434c) }

var fileDescriptor_126eb6f1d39e434c = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2f, 0x28, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0xca, 0xcf, 0x49,
	0x85, 0x08, 0x28, 0x45, 0x71, 0x89, 0x84, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0x06, 0xe5, 0xe7, 0xa4,
	0x3a, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0xfb, 0x85, 0xb8, 0x09, 0x49, 0x71, 0x71, 0x80, 0x44,
	0x42, 0x43, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x21, 0x35, 0x2e,
	0x76, 0xa8, 0x4a, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x1e, 0x3d, 0x24, 0xdd, 0x41, 0x30,
	0x49, 0x25, 0x23, 0x2e, 0x91, 0xa0, 0xd4, 0xdc, 0xfc, 0x32, 0x12, 0xcc, 0x56, 0xf2, 0xe6, 0x12,
	0x86, 0xb8, 0xc7, 0x37, 0xb1, 0x00, 0x49, 0x8b, 0x04, 0x17, 0xbb, 0x6f, 0x62, 0x01, 0x92, 0x0e,
	0x18, 0x17, 0x64, 0x58, 0x70, 0x6a, 0x51, 0x59, 0x6a, 0x91, 0xa7, 0x0b, 0xd8, 0x35, 0xac, 0x41,
	0x70, 0xbe, 0x92, 0x3e, 0x97, 0x30, 0xc4, 0x01, 0x44, 0x1a, 0xa6, 0xa4, 0xc3, 0x25, 0xe0, 0x9e,
	0x5a, 0x82, 0x50, 0x1d, 0x94, 0x5a, 0x88, 0x47, 0xb5, 0x3e, 0x97, 0x20, 0x9a, 0xea, 0xe2, 0x02,
	0x14, 0xf7, 0x30, 0xa2, 0xb9, 0xa7, 0x82, 0x4b, 0x0c, 0xe2, 0xb9, 0xe0, 0x92, 0xc4, 0x92, 0xcc,
	0x64, 0xa8, 0x39, 0x20, 0x27, 0x89, 0x71, 0xb1, 0x45, 0xe5, 0xe7, 0xa5, 0xc2, 0xf5, 0x40, 0x79,
	0x42, 0x0a, 0x5c, 0xdc, 0x70, 0xb5, 0x70, 0x0f, 0x22, 0x0b, 0x09, 0xa9, 0x70, 0xf1, 0xa2, 0x98,
	0x26, 0xc1, 0x0c, 0x76, 0x24, 0xaa, 0xa0, 0x92, 0x3f, 0x97, 0xb0, 0x7b, 0x6a, 0x09, 0x8a, 0x18,
	0xc8, 0x6f, 0x64, 0x5b, 0xab, 0x64, 0xc3, 0x25, 0x82, 0x69, 0x60, 0x71, 0x01, 0xa6, 0x73, 0x18,
	0xb1, 0x38, 0xc7, 0x49, 0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0xcc, 0xd3, 0x0f, 0x12, 0x4c, 0xfa, 0xc5, 0x45, 0xc9,
	0xfa, 0xe0, 0xb4, 0xa9, 0x9f, 0x5b, 0x9c, 0x9e, 0xc4, 0x06, 0x66, 0x1a, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0x7c, 0xd9, 0x2f, 0xc4, 0x02, 0x00, 0x00,
}

func (m *UpdateRoleAddressNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoleAddressNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoleAddressNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGps(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleUUID) > 0 {
		i -= len(m.RoleUUID)
		copy(dAtA[i:], m.RoleUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.RoleUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRoleAddressNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRoleAddressNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRoleAddressNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleUUID) > 0 {
		i -= len(m.RoleUUID)
		copy(dAtA[i:], m.RoleUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.RoleUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMapAddressNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMapAddressNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMapAddressNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MapUUID) > 0 {
		i -= len(m.MapUUID)
		copy(dAtA[i:], m.MapUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.MapUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMapAddressNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMapAddressNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMapAddressNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapUUID) > 0 {
		i -= len(m.MapUUID)
		copy(dAtA[i:], m.MapUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.MapUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMapAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapAddressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapAddressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapUUID) > 0 {
		i -= len(m.MapUUID)
		copy(dAtA[i:], m.MapUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.MapUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMapAddressResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMapAddressResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMapAddressResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStaticMapUUIDNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStaticMapUUIDNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStaticMapUUIDNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StaticMapUUID) > 0 {
		i -= len(m.StaticMapUUID)
		copy(dAtA[i:], m.StaticMapUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.StaticMapUUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StaticMapID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.StaticMapID))
		i--
		dAtA[i] = 0x10
	}
	if m.ZoneID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.ZoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStaticMapUUIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStaticMapUUIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStaticMapUUIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StaticMapID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.StaticMapID))
		i--
		dAtA[i] = 0x10
	}
	if m.ZoneID != 0 {
		i = encodeVarintGps(dAtA, i, uint64(m.ZoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStaticMapUUIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStaticMapUUIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStaticMapUUIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StaticMapUUID) > 0 {
		i -= len(m.StaticMapUUID)
		copy(dAtA[i:], m.StaticMapUUID)
		i = encodeVarintGps(dAtA, i, uint64(len(m.StaticMapUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGps(dAtA []byte, offset int, v uint64) int {
	offset -= sovGps(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateRoleAddressNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRoleAddressNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMapAddressNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.ServerID != 0 {
		n += 1 + sovGps(uint64(m.ServerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveMapAddressNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapAddressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMapAddressResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerID != 0 {
		n += 1 + sovGps(uint64(m.ServerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStaticMapUUIDNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZoneID != 0 {
		n += 1 + sovGps(uint64(m.ZoneID))
	}
	if m.StaticMapID != 0 {
		n += 1 + sovGps(uint64(m.StaticMapID))
	}
	l = len(m.StaticMapUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStaticMapUUIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZoneID != 0 {
		n += 1 + sovGps(uint64(m.ZoneID))
	}
	if m.StaticMapID != 0 {
		n += 1 + sovGps(uint64(m.StaticMapID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStaticMapUUIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StaticMapUUID)
	if l > 0 {
		n += 1 + l + sovGps(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGps(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGps(x uint64) (n int) {
	return sovGps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateRoleAddressNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoleAddressNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoleAddressNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &data.RoleAddress{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRoleAddressNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRoleAddressNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRoleAddressNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMapAddressNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMapAddressNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMapAddressNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMapAddressNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMapAddressNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMapAddressNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMapAddressResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAddressResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAddressResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStaticMapUUIDNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStaticMapUUIDNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStaticMapUUIDNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMapID", wireType)
			}
			m.StaticMapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaticMapID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticMapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStaticMapUUIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStaticMapUUIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStaticMapUUIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMapID", wireType)
			}
			m.StaticMapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaticMapID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStaticMapUUIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStaticMapUUIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStaticMapUUIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticMapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGps
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGps
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGps
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGps        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGps          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGps = fmt.Errorf("proto: unexpected end of group")
)
