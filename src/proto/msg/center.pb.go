// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: center.proto

package msg

import (
	etc "INServer/src/proto/etc"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerState int32

const (
	ServerState_Start   ServerState = 0
	ServerState_Ready   ServerState = 1
	ServerState_Running ServerState = 2
	ServerState_Offline ServerState = 3
)

var ServerState_name = map[int32]string{
	0: "Start",
	1: "Ready",
	2: "Running",
	3: "Offline",
}

var ServerState_value = map[string]int32{
	"Start":   0,
	"Ready":   1,
	"Running": 2,
	"Offline": 3,
}

func (x ServerState) String() string {
	return proto.EnumName(ServerState_name, int32(x))
}

func (ServerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{0}
}

type ServerStateReq struct {
	Info                 *ServerInfo `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServerStateReq) Reset()         { *m = ServerStateReq{} }
func (m *ServerStateReq) String() string { return proto.CompactTextString(m) }
func (*ServerStateReq) ProtoMessage()    {}
func (*ServerStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{0}
}
func (m *ServerStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStateReq.Merge(m, src)
}
func (m *ServerStateReq) XXX_Size() int {
	return m.Size()
}
func (m *ServerStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStateReq proto.InternalMessageInfo

func (m *ServerStateReq) GetInfo() *ServerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type StaticMapLocation struct {
	MapID                int32    `protobuf:"varint,1,opt,name=MapID,proto3" json:"MapID,omitempty"`
	ServerID             int32    `protobuf:"varint,2,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaticMapLocation) Reset()         { *m = StaticMapLocation{} }
func (m *StaticMapLocation) String() string { return proto.CompactTextString(m) }
func (*StaticMapLocation) ProtoMessage()    {}
func (*StaticMapLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{1}
}
func (m *StaticMapLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticMapLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaticMapLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaticMapLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticMapLocation.Merge(m, src)
}
func (m *StaticMapLocation) XXX_Size() int {
	return m.Size()
}
func (m *StaticMapLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticMapLocation.DiscardUnknown(m)
}

var xxx_messageInfo_StaticMapLocation proto.InternalMessageInfo

func (m *StaticMapLocation) GetMapID() int32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

func (m *StaticMapLocation) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

type ZoneLocation struct {
	ZoneID               int32                `protobuf:"varint,1,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	StaticMapLocations   []*StaticMapLocation `protobuf:"bytes,2,rep,name=StaticMapLocations,proto3" json:"StaticMapLocations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ZoneLocation) Reset()         { *m = ZoneLocation{} }
func (m *ZoneLocation) String() string { return proto.CompactTextString(m) }
func (*ZoneLocation) ProtoMessage()    {}
func (*ZoneLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{2}
}
func (m *ZoneLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneLocation.Merge(m, src)
}
func (m *ZoneLocation) XXX_Size() int {
	return m.Size()
}
func (m *ZoneLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneLocation proto.InternalMessageInfo

func (m *ZoneLocation) GetZoneID() int32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *ZoneLocation) GetStaticMapLocations() []*StaticMapLocation {
	if m != nil {
		return m.StaticMapLocations
	}
	return nil
}

type ServerStateResp struct {
	ServerType           string            `protobuf:"bytes,1,opt,name=ServerType,proto3" json:"ServerType,omitempty"`
	Message              string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ServerConfig         *etc.ServerConfig `protobuf:"bytes,3,opt,name=ServerConfig,proto3" json:"ServerConfig,omitempty"`
	ServerInfoList       []*ServerInfo     `protobuf:"bytes,4,rep,name=ServerInfoList,proto3" json:"ServerInfoList,omitempty"`
	Servers              []*etc.Server     `protobuf:"bytes,5,rep,name=Servers,proto3" json:"Servers,omitempty"`
	Zones                []*etc.Zone       `protobuf:"bytes,6,rep,name=Zones,proto3" json:"Zones,omitempty"`
	ZoneLocations        []*ZoneLocation   `protobuf:"bytes,7,rep,name=ZoneLocations,proto3" json:"ZoneLocations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerStateResp) Reset()         { *m = ServerStateResp{} }
func (m *ServerStateResp) String() string { return proto.CompactTextString(m) }
func (*ServerStateResp) ProtoMessage()    {}
func (*ServerStateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{3}
}
func (m *ServerStateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerStateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerStateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerStateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStateResp.Merge(m, src)
}
func (m *ServerStateResp) XXX_Size() int {
	return m.Size()
}
func (m *ServerStateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStateResp.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStateResp proto.InternalMessageInfo

func (m *ServerStateResp) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func (m *ServerStateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServerStateResp) GetServerConfig() *etc.ServerConfig {
	if m != nil {
		return m.ServerConfig
	}
	return nil
}

func (m *ServerStateResp) GetServerInfoList() []*ServerInfo {
	if m != nil {
		return m.ServerInfoList
	}
	return nil
}

func (m *ServerStateResp) GetServers() []*etc.Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *ServerStateResp) GetZones() []*etc.Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *ServerStateResp) GetZoneLocations() []*ZoneLocation {
	if m != nil {
		return m.ZoneLocations
	}
	return nil
}

type ServerInfo struct {
	ServerID             int32       `protobuf:"varint,1,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	Address              []byte      `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	State                ServerState `protobuf:"varint,3,opt,name=State,proto3,enum=ServerState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{4}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *ServerInfo) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ServerInfo) GetState() ServerState {
	if m != nil {
		return m.State
	}
	return ServerState_Start
}

type ServerInfoList struct {
	Servers              []*ServerInfo `protobuf:"bytes,1,rep,name=Servers,proto3" json:"Servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServerInfoList) Reset()         { *m = ServerInfoList{} }
func (m *ServerInfoList) String() string { return proto.CompactTextString(m) }
func (*ServerInfoList) ProtoMessage()    {}
func (*ServerInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{5}
}
func (m *ServerInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoList.Merge(m, src)
}
func (m *ServerInfoList) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoList proto.InternalMessageInfo

func (m *ServerInfoList) GetServers() []*ServerInfo {
	if m != nil {
		return m.Servers
	}
	return nil
}

type UpdateETC struct {
	ServerConfig         *etc.ServerConfig `protobuf:"bytes,1,opt,name=ServerConfig,proto3" json:"ServerConfig,omitempty"`
	Servers              []*etc.Server     `protobuf:"bytes,2,rep,name=Servers,proto3" json:"Servers,omitempty"`
	Zones                []*etc.Zone       `protobuf:"bytes,3,rep,name=Zones,proto3" json:"Zones,omitempty"`
	ZoneLocations        []*ZoneLocation   `protobuf:"bytes,4,rep,name=ZoneLocations,proto3" json:"ZoneLocations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateETC) Reset()         { *m = UpdateETC{} }
func (m *UpdateETC) String() string { return proto.CompactTextString(m) }
func (*UpdateETC) ProtoMessage()    {}
func (*UpdateETC) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de517c49d537f4b, []int{6}
}
func (m *UpdateETC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateETC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateETC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateETC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateETC.Merge(m, src)
}
func (m *UpdateETC) XXX_Size() int {
	return m.Size()
}
func (m *UpdateETC) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateETC.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateETC proto.InternalMessageInfo

func (m *UpdateETC) GetServerConfig() *etc.ServerConfig {
	if m != nil {
		return m.ServerConfig
	}
	return nil
}

func (m *UpdateETC) GetServers() []*etc.Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *UpdateETC) GetZones() []*etc.Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *UpdateETC) GetZoneLocations() []*ZoneLocation {
	if m != nil {
		return m.ZoneLocations
	}
	return nil
}

func init() {
	proto.RegisterEnum("ServerState", ServerState_name, ServerState_value)
	proto.RegisterType((*ServerStateReq)(nil), "ServerStateReq")
	proto.RegisterType((*StaticMapLocation)(nil), "StaticMapLocation")
	proto.RegisterType((*ZoneLocation)(nil), "ZoneLocation")
	proto.RegisterType((*ServerStateResp)(nil), "ServerStateResp")
	proto.RegisterType((*ServerInfo)(nil), "ServerInfo")
	proto.RegisterType((*ServerInfoList)(nil), "ServerInfoList")
	proto.RegisterType((*UpdateETC)(nil), "UpdateETC")
}

func init() { proto.RegisterFile("center.proto", fileDescriptor_1de517c49d537f4b) }

var fileDescriptor_1de517c49d537f4b = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x8a, 0xd3, 0x50,
	0x14, 0xc7, 0xe7, 0xa6, 0x4d, 0x63, 0x4f, 0xd2, 0xb1, 0x1e, 0x64, 0xb8, 0x8c, 0x10, 0xc7, 0x80,
	0x50, 0x5c, 0xa4, 0x4c, 0xbb, 0x70, 0xe5, 0xc2, 0xf9, 0x58, 0x14, 0xa6, 0x0a, 0x77, 0xc6, 0xcd,
	0xec, 0x62, 0x7b, 0x53, 0x22, 0x7a, 0x13, 0x73, 0xa3, 0x30, 0x3e, 0x89, 0x8f, 0xe0, 0xde, 0x97,
	0x70, 0xe9, 0x23, 0x48, 0x7d, 0x11, 0xb9, 0x27, 0x49, 0x4d, 0x5a, 0xa1, 0xee, 0xf2, 0xff, 0xb8,
	0x5f, 0xbf, 0x43, 0xc0, 0x5b, 0x48, 0x55, 0xc8, 0x3c, 0xcc, 0xf2, 0xb4, 0x48, 0x8f, 0x07, 0x5a,
	0xe6, 0x9f, 0x65, 0xae, 0x2b, 0xe9, 0x7e, 0x49, 0x95, 0xac, 0x44, 0x70, 0x0a, 0x87, 0xd7, 0x94,
	0x5e, 0x17, 0x51, 0x21, 0x85, 0xfc, 0x88, 0x8f, 0xa1, 0x3b, 0x53, 0x71, 0xca, 0xd9, 0x09, 0x1b,
	0xb9, 0x13, 0x37, 0x2c, 0x63, 0x63, 0x09, 0x0a, 0x82, 0x4b, 0x78, 0x60, 0xca, 0xc9, 0x62, 0x1e,
	0x65, 0x57, 0xe9, 0x22, 0x2a, 0x92, 0x54, 0xe1, 0x43, 0xb0, 0xe7, 0x51, 0x36, 0xbb, 0xa0, 0x65,
	0xb6, 0x28, 0x05, 0x1e, 0xc3, 0xbd, 0x6a, 0xf9, 0x05, 0xb7, 0x28, 0xd8, 0xe8, 0xe0, 0x1d, 0x78,
	0xb7, 0xa9, 0x92, 0x9b, 0x1d, 0x8e, 0xa0, 0x67, 0xf4, 0x66, 0x8b, 0x4a, 0xe1, 0x19, 0xe0, 0xce,
	0x71, 0x9a, 0x5b, 0x27, 0x9d, 0x91, 0x3b, 0xc1, 0x70, 0x27, 0x12, 0xff, 0x68, 0x07, 0xdf, 0x2c,
	0xb8, 0xdf, 0x7a, 0xa6, 0xce, 0xd0, 0x07, 0x28, 0xad, 0x9b, 0xbb, 0x4c, 0xd2, 0x99, 0x7d, 0xd1,
	0x70, 0x90, 0x83, 0x33, 0x97, 0x5a, 0x47, 0x2b, 0x49, 0x57, 0xef, 0x8b, 0x5a, 0xe2, 0x29, 0x78,
	0x65, 0xef, 0x3c, 0x55, 0x71, 0xb2, 0xe2, 0x1d, 0x22, 0x35, 0x08, 0x9b, 0xa6, 0x68, 0x55, 0x70,
	0x5a, 0x63, 0x36, 0x04, 0xaf, 0x12, 0x5d, 0xf0, 0x2e, 0x3d, 0xa0, 0x85, 0x77, 0xab, 0x82, 0x4f,
	0xc0, 0x29, 0x1d, 0xcd, 0x6d, 0x6a, 0x3b, 0x55, 0x5b, 0xd4, 0x3e, 0x3e, 0x02, 0xdb, 0x60, 0xd2,
	0xbc, 0x47, 0x05, 0x3b, 0x34, 0x4a, 0x94, 0x1e, 0x4e, 0x61, 0xd0, 0x24, 0xac, 0xb9, 0x43, 0xa5,
	0x41, 0xd8, 0x74, 0x45, 0xbb, 0x13, 0xc4, 0x35, 0x16, 0x73, 0x8d, 0xd6, 0x00, 0x59, 0x7b, 0x80,
	0x06, 0xd0, 0xcb, 0xe5, 0x32, 0x97, 0x5a, 0x13, 0x20, 0x4f, 0xd4, 0x12, 0x03, 0xb0, 0x89, 0x33,
	0x91, 0x39, 0x9c, 0x78, 0x61, 0x93, 0x7d, 0x19, 0x05, 0xcf, 0xb7, 0x89, 0xe0, 0xd3, 0xbf, 0xcf,
	0x65, 0xbb, 0x70, 0xea, 0x2c, 0xf8, 0xce, 0xa0, 0xff, 0x26, 0x5b, 0x46, 0x85, 0xbc, 0xbc, 0x39,
	0xdf, 0x99, 0x05, 0xdb, 0x3f, 0x8b, 0x06, 0x56, 0x6b, 0x1f, 0xd6, 0xce, 0xff, 0x60, 0xed, 0xee,
	0xc7, 0xfa, 0xec, 0x05, 0xb8, 0x0d, 0x08, 0xd8, 0x27, 0x42, 0x79, 0x31, 0x3c, 0x30, 0x9f, 0x42,
	0x46, 0xcb, 0xbb, 0x21, 0x43, 0x17, 0x1c, 0xf1, 0x49, 0xa9, 0x44, 0xad, 0x86, 0x96, 0x11, 0xaf,
	0xe3, 0xf8, 0x7d, 0xa2, 0xe4, 0xb0, 0x73, 0x36, 0xfa, 0xb1, 0xf6, 0xd9, 0xcf, 0xb5, 0xcf, 0x7e,
	0xad, 0x7d, 0xf6, 0xf5, 0xb7, 0x7f, 0x70, 0x7b, 0x34, 0x7b, 0x55, 0x6e, 0x38, 0xd6, 0xf9, 0x62,
	0x4c, 0x3f, 0xf3, 0xf8, 0x83, 0x5e, 0xbd, 0xed, 0xd1, 0xe7, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0xb1, 0xb0, 0xc4, 0x03, 0x04, 0x00, 0x00,
}

func (m *ServerStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerStateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerStateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StaticMapLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticMapLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticMapLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerID != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x10
	}
	if m.MapID != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZoneLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StaticMapLocations) > 0 {
		for iNdEx := len(m.StaticMapLocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticMapLocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ZoneID != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ZoneID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerStateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerStateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerStateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ZoneLocations) > 0 {
		for iNdEx := len(m.ZoneLocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ZoneLocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ServerInfoList) > 0 {
		for iNdEx := len(m.ServerInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServerInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ServerConfig != nil {
		{
			size, err := m.ServerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerType) > 0 {
		i -= len(m.ServerType)
		copy(dAtA[i:], m.ServerType)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.ServerType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServerID != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateETC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateETC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateETC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ZoneLocations) > 0 {
		for iNdEx := len(m.ZoneLocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ZoneLocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ServerConfig != nil {
		{
			size, err := m.ServerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCenter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCenter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServerStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaticMapLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapID != 0 {
		n += 1 + sovCenter(uint64(m.MapID))
	}
	if m.ServerID != 0 {
		n += 1 + sovCenter(uint64(m.ServerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZoneLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZoneID != 0 {
		n += 1 + sovCenter(uint64(m.ZoneID))
	}
	if len(m.StaticMapLocations) > 0 {
		for _, e := range m.StaticMapLocations {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerStateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerType)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.ServerConfig != nil {
		l = m.ServerConfig.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	if len(m.ServerInfoList) > 0 {
		for _, e := range m.ServerInfoList {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.ZoneLocations) > 0 {
		for _, e := range m.ZoneLocations {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerID != 0 {
		n += 1 + sovCenter(uint64(m.ServerID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCenter(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateETC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerConfig != nil {
		l = m.ServerConfig.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.ZoneLocations) > 0 {
		for _, e := range m.ZoneLocations {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCenter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCenter(x uint64) (n int) {
	return sovCenter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ServerInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticMapLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticMapLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticMapLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapID", wireType)
			}
			m.MapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticMapLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticMapLocations = append(m.StaticMapLocations, &StaticMapLocation{})
			if err := m.StaticMapLocations[len(m.StaticMapLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerStateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerConfig == nil {
				m.ServerConfig = &etc.ServerConfig{}
			}
			if err := m.ServerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerInfoList = append(m.ServerInfoList, &ServerInfo{})
			if err := m.ServerInfoList[len(m.ServerInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &etc.Server{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &etc.Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneLocations = append(m.ZoneLocations, &ZoneLocation{})
			if err := m.ZoneLocations[len(m.ZoneLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ServerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &ServerInfo{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateETC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateETC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateETC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerConfig == nil {
				m.ServerConfig = &etc.ServerConfig{}
			}
			if err := m.ServerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &etc.Server{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &etc.Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneLocations = append(m.ZoneLocations, &ZoneLocation{})
			if err := m.ZoneLocations[len(m.ZoneLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCenter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCenter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCenter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCenter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCenter = fmt.Errorf("proto: unexpected end of group")
)
