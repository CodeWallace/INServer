// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client-world.proto

package msg

import (
	data "INServer/src/proto/data"
	engine "INServer/src/proto/engine"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MoveINF struct {
	Position             *engine.Vector3 `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	To                   *engine.Vector3 `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MoveINF) Reset()         { *m = MoveINF{} }
func (m *MoveINF) String() string { return proto.CompactTextString(m) }
func (*MoveINF) ProtoMessage()    {}
func (*MoveINF) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{0}
}
func (m *MoveINF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveINF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveINF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveINF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveINF.Merge(m, src)
}
func (m *MoveINF) XXX_Size() int {
	return m.Size()
}
func (m *MoveINF) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveINF.DiscardUnknown(m)
}

var xxx_messageInfo_MoveINF proto.InternalMessageInfo

func (m *MoveINF) GetPosition() *engine.Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *MoveINF) GetTo() *engine.Vector3 {
	if m != nil {
		return m.To
	}
	return nil
}

type MoveNTF struct {
	EntityUUID           string          `protobuf:"bytes,1,opt,name=EntityUUID,proto3" json:"EntityUUID,omitempty"`
	To                   *engine.Vector3 `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MoveNTF) Reset()         { *m = MoveNTF{} }
func (m *MoveNTF) String() string { return proto.CompactTextString(m) }
func (*MoveNTF) ProtoMessage()    {}
func (*MoveNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{1}
}
func (m *MoveNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveNTF.Merge(m, src)
}
func (m *MoveNTF) XXX_Size() int {
	return m.Size()
}
func (m *MoveNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveNTF.DiscardUnknown(m)
}

var xxx_messageInfo_MoveNTF proto.InternalMessageInfo

func (m *MoveNTF) GetEntityUUID() string {
	if m != nil {
		return m.EntityUUID
	}
	return ""
}

func (m *MoveNTF) GetTo() *engine.Vector3 {
	if m != nil {
		return m.To
	}
	return nil
}

type NearEntity struct {
	EntityUUID           string          `protobuf:"bytes,1,opt,name=EntityUUID,proto3" json:"EntityUUID,omitempty"`
	Position             *engine.Vector3 `protobuf:"bytes,2,opt,name=Position,proto3" json:"Position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NearEntity) Reset()         { *m = NearEntity{} }
func (m *NearEntity) String() string { return proto.CompactTextString(m) }
func (*NearEntity) ProtoMessage()    {}
func (*NearEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{2}
}
func (m *NearEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearEntity.Merge(m, src)
}
func (m *NearEntity) XXX_Size() int {
	return m.Size()
}
func (m *NearEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_NearEntity.DiscardUnknown(m)
}

var xxx_messageInfo_NearEntity proto.InternalMessageInfo

func (m *NearEntity) GetEntityUUID() string {
	if m != nil {
		return m.EntityUUID
	}
	return ""
}

func (m *NearEntity) GetPosition() *engine.Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

type NearEntitiesNTF struct {
	Entities             []*NearEntity `protobuf:"bytes,1,rep,name=Entities,proto3" json:"Entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NearEntitiesNTF) Reset()         { *m = NearEntitiesNTF{} }
func (m *NearEntitiesNTF) String() string { return proto.CompactTextString(m) }
func (*NearEntitiesNTF) ProtoMessage()    {}
func (*NearEntitiesNTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{3}
}
func (m *NearEntitiesNTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearEntitiesNTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearEntitiesNTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearEntitiesNTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearEntitiesNTF.Merge(m, src)
}
func (m *NearEntitiesNTF) XXX_Size() int {
	return m.Size()
}
func (m *NearEntitiesNTF) XXX_DiscardUnknown() {
	xxx_messageInfo_NearEntitiesNTF.DiscardUnknown(m)
}

var xxx_messageInfo_NearEntitiesNTF proto.InternalMessageInfo

func (m *NearEntitiesNTF) GetEntities() []*NearEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type EntityDataReq struct {
	EntityUUIDs          []string `protobuf:"bytes,1,rep,name=EntityUUIDs,proto3" json:"EntityUUIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityDataReq) Reset()         { *m = EntityDataReq{} }
func (m *EntityDataReq) String() string { return proto.CompactTextString(m) }
func (*EntityDataReq) ProtoMessage()    {}
func (*EntityDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{4}
}
func (m *EntityDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityDataReq.Merge(m, src)
}
func (m *EntityDataReq) XXX_Size() int {
	return m.Size()
}
func (m *EntityDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_EntityDataReq proto.InternalMessageInfo

func (m *EntityDataReq) GetEntityUUIDs() []string {
	if m != nil {
		return m.EntityUUIDs
	}
	return nil
}

type EntityDataRes struct {
	Entities             []*data.EntityData `protobuf:"bytes,1,rep,name=Entities,proto3" json:"Entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EntityDataRes) Reset()         { *m = EntityDataRes{} }
func (m *EntityDataRes) String() string { return proto.CompactTextString(m) }
func (*EntityDataRes) ProtoMessage()    {}
func (*EntityDataRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f612274364f891ed, []int{5}
}
func (m *EntityDataRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityDataRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityDataRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityDataRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityDataRes.Merge(m, src)
}
func (m *EntityDataRes) XXX_Size() int {
	return m.Size()
}
func (m *EntityDataRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityDataRes.DiscardUnknown(m)
}

var xxx_messageInfo_EntityDataRes proto.InternalMessageInfo

func (m *EntityDataRes) GetEntities() []*data.EntityData {
	if m != nil {
		return m.Entities
	}
	return nil
}

func init() {
	proto.RegisterType((*MoveINF)(nil), "MoveINF")
	proto.RegisterType((*MoveNTF)(nil), "MoveNTF")
	proto.RegisterType((*NearEntity)(nil), "NearEntity")
	proto.RegisterType((*NearEntitiesNTF)(nil), "NearEntitiesNTF")
	proto.RegisterType((*EntityDataReq)(nil), "EntityDataReq")
	proto.RegisterType((*EntityDataRes)(nil), "EntityDataRes")
}

func init() { proto.RegisterFile("client-world.proto", fileDescriptor_f612274364f891ed) }

var fileDescriptor_f612274364f891ed = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2d, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2,
	0xca, 0x4d, 0x2c, 0xc9, 0x80, 0xb2, 0x79, 0x52, 0xf3, 0x4a, 0x32, 0x4b, 0x2a, 0x21, 0x3c, 0x25,
	0x4f, 0x2e, 0x76, 0xdf, 0xfc, 0xb2, 0x54, 0x4f, 0x3f, 0x37, 0x21, 0x15, 0x2e, 0x8e, 0x80, 0xfc,
	0xe2, 0xcc, 0x92, 0xcc, 0xfc, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x0e, 0xbd, 0xb0,
	0xd4, 0xe4, 0x92, 0xfc, 0x22, 0xe3, 0x20, 0xb8, 0x8c, 0x90, 0x04, 0x17, 0x53, 0x48, 0xbe, 0x04,
	0x13, 0x9a, 0x3c, 0x53, 0x48, 0xbe, 0x92, 0x33, 0xc4, 0x28, 0xbf, 0x10, 0x37, 0x21, 0x39, 0x2e,
	0x2e, 0x57, 0xb0, 0x2d, 0xa1, 0xa1, 0x9e, 0x2e, 0x60, 0xc3, 0x38, 0x83, 0x90, 0x44, 0xf0, 0x18,
	0x12, 0xc4, 0xc5, 0xe5, 0x97, 0x9a, 0x58, 0x04, 0x51, 0x4b, 0xd0, 0x1c, 0x64, 0x27, 0x33, 0xe1,
	0x72, 0xb2, 0x92, 0x15, 0x17, 0x3f, 0xdc, 0xcc, 0xcc, 0xd4, 0x62, 0x90, 0x03, 0xd5, 0xb9, 0x38,
	0x60, 0x5c, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x6e, 0x3d, 0x84, 0xbd, 0x41, 0x70, 0x49,
	0x25, 0x43, 0x2e, 0x5e, 0x88, 0x98, 0x4b, 0x62, 0x49, 0x62, 0x50, 0x6a, 0xa1, 0x90, 0x02, 0x17,
	0x37, 0xc2, 0x01, 0x10, 0xcd, 0x9c, 0x41, 0xc8, 0x42, 0x4a, 0x16, 0xa8, 0x5a, 0x8a, 0xb1, 0x5a,
	0x86, 0xa4, 0x02, 0x2e, 0xe9, 0xa4, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0xe6, 0xe9, 0x17, 0x9c, 0x5a, 0x54, 0x96,
	0x5a, 0xa4, 0x5f, 0x5c, 0x94, 0xac, 0x0f, 0x8e, 0x32, 0xfd, 0xdc, 0xe2, 0xf4, 0x24, 0x36, 0x30,
	0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x3d, 0x55, 0xf4, 0xed, 0x01, 0x00, 0x00,
}

func (m *MoveINF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveINF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveINF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientWorld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientWorld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MoveNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientWorld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntityUUID) > 0 {
		i -= len(m.EntityUUID)
		copy(dAtA[i:], m.EntityUUID)
		i = encodeVarintClientWorld(dAtA, i, uint64(len(m.EntityUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NearEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NearEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientWorld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntityUUID) > 0 {
		i -= len(m.EntityUUID)
		copy(dAtA[i:], m.EntityUUID)
		i = encodeVarintClientWorld(dAtA, i, uint64(len(m.EntityUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NearEntitiesNTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearEntitiesNTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NearEntitiesNTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientWorld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EntityDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityDataReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityDataReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntityUUIDs) > 0 {
		for iNdEx := len(m.EntityUUIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntityUUIDs[iNdEx])
			copy(dAtA[i:], m.EntityUUIDs[iNdEx])
			i = encodeVarintClientWorld(dAtA, i, uint64(len(m.EntityUUIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EntityDataRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityDataRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityDataRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientWorld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientWorld(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientWorld(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MoveINF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityUUID)
	if l > 0 {
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityUUID)
	if l > 0 {
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovClientWorld(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearEntitiesNTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovClientWorld(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntityDataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntityUUIDs) > 0 {
		for _, s := range m.EntityUUIDs {
			l = len(s)
			n += 1 + l + sovClientWorld(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntityDataRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovClientWorld(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientWorld(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientWorld(x uint64) (n int) {
	return sovClientWorld(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MoveINF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveINF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveINF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &engine.Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &engine.Vector3{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &engine.Vector3{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &engine.Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearEntitiesNTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearEntitiesNTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearEntitiesNTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &NearEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUUIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUUIDs = append(m.EntityUUIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityDataRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityDataRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityDataRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientWorld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientWorld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &data.EntityData{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientWorld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientWorld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientWorld(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientWorld
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientWorld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientWorld
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientWorld
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientWorld
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientWorld        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientWorld          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientWorld = fmt.Errorf("proto: unexpected end of group")
)
