// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dispatcher.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Thing struct {
	Buffer               []byte   `protobuf:"bytes,1,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	ToPlayerUUID         string   `protobuf:"bytes,2,opt,name=ToPlayerUUID,proto3" json:"ToPlayerUUID,omitempty"`
	ToWorldID            int32    `protobuf:"varint,3,opt,name=ToWorldID,proto3" json:"ToWorldID,omitempty"`
	ToMapUUID            int32    `protobuf:"varint,4,opt,name=ToMapUUID,proto3" json:"ToMapUUID,omitempty"`
	ToPlayerUUIDList     []string `protobuf:"bytes,5,rep,name=ToPlayerUUIDList,proto3" json:"ToPlayerUUIDList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thing) Reset()         { *m = Thing{} }
func (m *Thing) String() string { return proto.CompactTextString(m) }
func (*Thing) ProtoMessage()    {}
func (*Thing) Descriptor() ([]byte, []int) {
	return fileDescriptor_06ad3a657945a291, []int{0}
}
func (m *Thing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thing.Merge(m, src)
}
func (m *Thing) XXX_Size() int {
	return m.Size()
}
func (m *Thing) XXX_DiscardUnknown() {
	xxx_messageInfo_Thing.DiscardUnknown(m)
}

var xxx_messageInfo_Thing proto.InternalMessageInfo

func (m *Thing) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

func (m *Thing) GetToPlayerUUID() string {
	if m != nil {
		return m.ToPlayerUUID
	}
	return ""
}

func (m *Thing) GetToWorldID() int32 {
	if m != nil {
		return m.ToWorldID
	}
	return 0
}

func (m *Thing) GetToMapUUID() int32 {
	if m != nil {
		return m.ToMapUUID
	}
	return 0
}

func (m *Thing) GetToPlayerUUIDList() []string {
	if m != nil {
		return m.ToPlayerUUIDList
	}
	return nil
}

func init() {
	proto.RegisterType((*Thing)(nil), "Thing")
}

func init() { proto.RegisterFile("dispatcher.proto", fileDescriptor_06ad3a657945a291) }

var fileDescriptor_06ad3a657945a291 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xc9, 0x2c, 0x2e,
	0x48, 0x2c, 0x49, 0xce, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x5a, 0xcd, 0xc8,
	0xc5, 0x1a, 0x92, 0x91, 0x99, 0x97, 0x2e, 0x24, 0xc6, 0xc5, 0xe6, 0x54, 0x9a, 0x96, 0x96, 0x5a,
	0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe5, 0x09, 0x29, 0x71, 0xf1, 0x84, 0xe4, 0x07,
	0xe4, 0x24, 0x56, 0xa6, 0x16, 0x85, 0x86, 0x7a, 0xba, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06,
	0xa1, 0x88, 0x09, 0xc9, 0x70, 0x71, 0x86, 0xe4, 0x87, 0xe7, 0x17, 0xe5, 0xa4, 0x78, 0xba, 0x48,
	0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x20, 0xb2, 0xbe, 0x89, 0x05, 0x60, 0xed, 0x2c,
	0x30, 0x59, 0xa8, 0x80, 0x90, 0x16, 0x97, 0x00, 0xb2, 0x59, 0x3e, 0x99, 0xc5, 0x25, 0x12, 0xac,
	0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x18, 0xe2, 0x4e, 0x1a, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0x62, 0x9e, 0x7e, 0xc1, 0xa9,
	0x45, 0x65, 0xa9, 0x45, 0xfa, 0xc5, 0x45, 0xc9, 0xfa, 0x60, 0x3f, 0xe9, 0xe7, 0x16, 0xa7, 0x27,
	0xb1, 0x81, 0x99, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xc1, 0x14, 0xc1, 0xf2, 0x00,
	0x00, 0x00,
}

func (m *Thing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Thing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToPlayerUUIDList) > 0 {
		for iNdEx := len(m.ToPlayerUUIDList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ToPlayerUUIDList[iNdEx])
			copy(dAtA[i:], m.ToPlayerUUIDList[iNdEx])
			i = encodeVarintDispatcher(dAtA, i, uint64(len(m.ToPlayerUUIDList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ToMapUUID != 0 {
		i = encodeVarintDispatcher(dAtA, i, uint64(m.ToMapUUID))
		i--
		dAtA[i] = 0x20
	}
	if m.ToWorldID != 0 {
		i = encodeVarintDispatcher(dAtA, i, uint64(m.ToWorldID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ToPlayerUUID) > 0 {
		i -= len(m.ToPlayerUUID)
		copy(dAtA[i:], m.ToPlayerUUID)
		i = encodeVarintDispatcher(dAtA, i, uint64(len(m.ToPlayerUUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buffer) > 0 {
		i -= len(m.Buffer)
		copy(dAtA[i:], m.Buffer)
		i = encodeVarintDispatcher(dAtA, i, uint64(len(m.Buffer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDispatcher(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispatcher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Thing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buffer)
	if l > 0 {
		n += 1 + l + sovDispatcher(uint64(l))
	}
	l = len(m.ToPlayerUUID)
	if l > 0 {
		n += 1 + l + sovDispatcher(uint64(l))
	}
	if m.ToWorldID != 0 {
		n += 1 + sovDispatcher(uint64(m.ToWorldID))
	}
	if m.ToMapUUID != 0 {
		n += 1 + sovDispatcher(uint64(m.ToMapUUID))
	}
	if len(m.ToPlayerUUIDList) > 0 {
		for _, s := range m.ToPlayerUUIDList {
			l = len(s)
			n += 1 + l + sovDispatcher(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDispatcher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispatcher(x uint64) (n int) {
	return sovDispatcher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Thing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatcher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispatcher
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatcher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffer = append(m.Buffer[:0], dAtA[iNdEx:postIndex]...)
			if m.Buffer == nil {
				m.Buffer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPlayerUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispatcher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatcher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPlayerUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToWorldID", wireType)
			}
			m.ToWorldID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToWorldID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToMapUUID", wireType)
			}
			m.ToMapUUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToMapUUID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPlayerUUIDList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispatcher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatcher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPlayerUUIDList = append(m.ToPlayerUUIDList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatcher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDispatcher
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDispatcher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispatcher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispatcher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispatcher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispatcher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispatcher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispatcher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispatcher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispatcher = fmt.Errorf("proto: unexpected end of group")
)
