// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client-gate.proto

package msg

import (
	data "INServer/src/proto/data"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionCert struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionCert) Reset()         { *m = SessionCert{} }
func (m *SessionCert) String() string { return proto.CompactTextString(m) }
func (*SessionCert) ProtoMessage()    {}
func (*SessionCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{0}
}
func (m *SessionCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCert.Merge(m, src)
}
func (m *SessionCert) XXX_Size() int {
	return m.Size()
}
func (m *SessionCert) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCert.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCert proto.InternalMessageInfo

func (m *SessionCert) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SessionCert) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CGTransmission struct {
	Command              Command  `protobuf:"varint,1,opt,name=Command,proto3,enum=Command" json:"Command,omitempty"`
	Buffer               []byte   `protobuf:"bytes,2,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGTransmission) Reset()         { *m = CGTransmission{} }
func (m *CGTransmission) String() string { return proto.CompactTextString(m) }
func (*CGTransmission) ProtoMessage()    {}
func (*CGTransmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{1}
}
func (m *CGTransmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CGTransmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CGTransmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CGTransmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGTransmission.Merge(m, src)
}
func (m *CGTransmission) XXX_Size() int {
	return m.Size()
}
func (m *CGTransmission) XXX_DiscardUnknown() {
	xxx_messageInfo_CGTransmission.DiscardUnknown(m)
}

var xxx_messageInfo_CGTransmission proto.InternalMessageInfo

func (m *CGTransmission) GetCommand() Command {
	if m != nil {
		return m.Command
	}
	return Command_KEEP_ALIVE
}

func (m *CGTransmission) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type ConnectGateReq struct {
	SessionCert          *SessionCert `protobuf:"bytes,1,opt,name=SessionCert,proto3" json:"SessionCert,omitempty"`
	Sequence             uint64       `protobuf:"varint,2,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConnectGateReq) Reset()         { *m = ConnectGateReq{} }
func (m *ConnectGateReq) String() string { return proto.CompactTextString(m) }
func (*ConnectGateReq) ProtoMessage()    {}
func (*ConnectGateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{2}
}
func (m *ConnectGateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectGateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectGateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectGateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectGateReq.Merge(m, src)
}
func (m *ConnectGateReq) XXX_Size() int {
	return m.Size()
}
func (m *ConnectGateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectGateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectGateReq proto.InternalMessageInfo

func (m *ConnectGateReq) GetSessionCert() *SessionCert {
	if m != nil {
		return m.SessionCert
	}
	return nil
}

func (m *ConnectGateReq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type ConnectGateResp struct {
	Success              bool         `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Player               *data.Player `protobuf:"bytes,2,opt,name=Player,proto3" json:"Player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConnectGateResp) Reset()         { *m = ConnectGateResp{} }
func (m *ConnectGateResp) String() string { return proto.CompactTextString(m) }
func (*ConnectGateResp) ProtoMessage()    {}
func (*ConnectGateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{3}
}
func (m *ConnectGateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectGateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectGateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectGateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectGateResp.Merge(m, src)
}
func (m *ConnectGateResp) XXX_Size() int {
	return m.Size()
}
func (m *ConnectGateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectGateResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectGateResp proto.InternalMessageInfo

func (m *ConnectGateResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ConnectGateResp) GetPlayer() *data.Player {
	if m != nil {
		return m.Player
	}
	return nil
}

type RoleEnterReq struct {
	RoleUUID             string   `protobuf:"bytes,1,opt,name=RoleUUID,proto3" json:"RoleUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleEnterReq) Reset()         { *m = RoleEnterReq{} }
func (m *RoleEnterReq) String() string { return proto.CompactTextString(m) }
func (*RoleEnterReq) ProtoMessage()    {}
func (*RoleEnterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{4}
}
func (m *RoleEnterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleEnterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleEnterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleEnterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleEnterReq.Merge(m, src)
}
func (m *RoleEnterReq) XXX_Size() int {
	return m.Size()
}
func (m *RoleEnterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleEnterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoleEnterReq proto.InternalMessageInfo

func (m *RoleEnterReq) GetRoleUUID() string {
	if m != nil {
		return m.RoleUUID
	}
	return ""
}

type RoleEnterResp struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleEnterResp) Reset()         { *m = RoleEnterResp{} }
func (m *RoleEnterResp) String() string { return proto.CompactTextString(m) }
func (*RoleEnterResp) ProtoMessage()    {}
func (*RoleEnterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{5}
}
func (m *RoleEnterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleEnterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleEnterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleEnterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleEnterResp.Merge(m, src)
}
func (m *RoleEnterResp) XXX_Size() int {
	return m.Size()
}
func (m *RoleEnterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleEnterResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoleEnterResp proto.InternalMessageInfo

func (m *RoleEnterResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ClientToGate struct {
	Connect              *ConnectGateReq `protobuf:"bytes,1,opt,name=Connect,proto3" json:"Connect,omitempty"`
	RoleEnter            *RoleEnterReq   `protobuf:"bytes,2,opt,name=RoleEnter,proto3" json:"RoleEnter,omitempty"`
	Request              *CGTransmission `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Notify               *CGTransmission `protobuf:"bytes,4,opt,name=Notify,proto3" json:"Notify,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ClientToGate) Reset()         { *m = ClientToGate{} }
func (m *ClientToGate) String() string { return proto.CompactTextString(m) }
func (*ClientToGate) ProtoMessage()    {}
func (*ClientToGate) Descriptor() ([]byte, []int) {
	return fileDescriptor_de75bf41a36e422d, []int{6}
}
func (m *ClientToGate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientToGate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientToGate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientToGate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientToGate.Merge(m, src)
}
func (m *ClientToGate) XXX_Size() int {
	return m.Size()
}
func (m *ClientToGate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientToGate.DiscardUnknown(m)
}

var xxx_messageInfo_ClientToGate proto.InternalMessageInfo

func (m *ClientToGate) GetConnect() *ConnectGateReq {
	if m != nil {
		return m.Connect
	}
	return nil
}

func (m *ClientToGate) GetRoleEnter() *RoleEnterReq {
	if m != nil {
		return m.RoleEnter
	}
	return nil
}

func (m *ClientToGate) GetRequest() *CGTransmission {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ClientToGate) GetNotify() *CGTransmission {
	if m != nil {
		return m.Notify
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionCert)(nil), "SessionCert")
	proto.RegisterType((*CGTransmission)(nil), "CGTransmission")
	proto.RegisterType((*ConnectGateReq)(nil), "ConnectGateReq")
	proto.RegisterType((*ConnectGateResp)(nil), "ConnectGateResp")
	proto.RegisterType((*RoleEnterReq)(nil), "RoleEnterReq")
	proto.RegisterType((*RoleEnterResp)(nil), "RoleEnterResp")
	proto.RegisterType((*ClientToGate)(nil), "ClientToGate")
}

func init() { proto.RegisterFile("client-gate.proto", fileDescriptor_de75bf41a36e422d) }

var fileDescriptor_de75bf41a36e422d = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0xad, 0x90, 0x52, 0x0e, 0x05, 0x74, 0x16, 0xa4, 0x61, 0x51, 0xcd, 0x6c, 0x04, 0x8d,
	0x25, 0x81, 0x37, 0xa0, 0x1a, 0x42, 0x24, 0xc4, 0x4c, 0x61, 0x63, 0xdc, 0xd4, 0x7a, 0x20, 0x4d,
	0xe8, 0x0c, 0xcc, 0x0c, 0x26, 0xbc, 0x89, 0xcf, 0xe2, 0x13, 0xb8, 0xf4, 0x11, 0x0c, 0xbe, 0x88,
	0xe9, 0xd0, 0x72, 0xdb, 0xe4, 0xe6, 0xee, 0xce, 0x77, 0xce, 0xcc, 0x7f, 0xfe, 0xfe, 0x53, 0x78,
	0x99, 0x1c, 0x52, 0xe4, 0xfa, 0xfd, 0x3e, 0xd6, 0x18, 0x1c, 0xa5, 0xd0, 0x62, 0xd8, 0x4d, 0x44,
	0x96, 0xc5, 0xfc, 0x7b, 0x81, 0xee, 0xf1, 0x10, 0x5f, 0x50, 0xde, 0x88, 0xce, 0xa0, 0x13, 0xa1,
	0x52, 0xa9, 0xe0, 0x21, 0x4a, 0x4d, 0x08, 0x34, 0xb7, 0xdb, 0xe5, 0x07, 0xcf, 0x7a, 0x6d, 0x8d,
	0xda, 0xcc, 0xd4, 0xe4, 0x05, 0x34, 0x3e, 0xe1, 0xc5, 0x7b, 0x6e, 0x5a, 0x79, 0x49, 0x57, 0xd0,
	0x0b, 0x17, 0x1b, 0x19, 0x73, 0x95, 0xa5, 0xe6, 0x2e, 0xa1, 0xd0, 0x0a, 0x6f, 0x5b, 0xcc, 0xd5,
	0xde, 0xd4, 0x09, 0x0a, 0x66, 0xe5, 0x80, 0x0c, 0xc0, 0x9e, 0x9f, 0x77, 0x3b, 0x94, 0x46, 0xca,
	0x65, 0x05, 0xd1, 0xaf, 0xd0, 0x0b, 0x05, 0xe7, 0x98, 0xe8, 0x45, 0xac, 0x91, 0xe1, 0x89, 0x04,
	0x35, 0x53, 0x46, 0xb1, 0x33, 0x75, 0x83, 0x4a, 0x8f, 0xd5, 0x5c, 0x0f, 0xc1, 0x89, 0xf0, 0x74,
	0x46, 0x9e, 0xa0, 0xd1, 0x6e, 0xb2, 0x3b, 0xd3, 0x15, 0xf4, 0x6b, 0xea, 0xea, 0x48, 0x3c, 0x68,
	0x45, 0xe7, 0x24, 0x41, 0xa5, 0x8c, 0xb4, 0xc3, 0x4a, 0x24, 0xaf, 0xc0, 0xfe, 0x6c, 0xd2, 0x31,
	0x32, 0x9d, 0x69, 0x2b, 0xb8, 0x21, 0x2b, 0xda, 0xf4, 0x2d, 0xb8, 0x4c, 0x1c, 0xf0, 0x23, 0xd7,
	0x28, 0x73, 0xa7, 0x43, 0x70, 0x72, 0xae, 0x64, 0x76, 0x67, 0x3a, 0x86, 0x6e, 0xe5, 0xec, 0x53,
	0x7b, 0xe9, 0x2f, 0x0b, 0xdc, 0xd0, 0x3c, 0xdc, 0x46, 0xe4, 0x36, 0xc9, 0x38, 0xcf, 0xd3, 0xb8,
	0x2e, 0xbe, 0xbe, 0x1f, 0xd4, 0x33, 0x62, 0xe5, 0x9c, 0xbc, 0x83, 0xf6, 0x7d, 0x4d, 0x61, 0xbb,
	0x1b, 0x54, 0x4d, 0xb2, 0x87, 0x79, 0xae, 0xcb, 0xf2, 0x64, 0x94, 0xf6, 0x1a, 0xa5, 0x6e, 0xed,
	0x25, 0x59, 0x39, 0x27, 0x6f, 0xc0, 0x5e, 0x0b, 0x9d, 0xee, 0x2e, 0x5e, 0xf3, 0xf1, 0x93, 0xc5,
	0x78, 0x3e, 0xfa, 0x7d, 0xf5, 0xad, 0x3f, 0x57, 0xdf, 0xfa, 0x7b, 0xf5, 0xad, 0x9f, 0xff, 0xfc,
	0x67, 0x5f, 0x06, 0xcb, 0x75, 0x84, 0xf2, 0x07, 0xca, 0x89, 0x92, 0xc9, 0xc4, 0xfc, 0x68, 0x93,
	0x4c, 0xed, 0xbf, 0xd9, 0xa6, 0x9c, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xa9, 0x4c, 0x92,
	0xa5, 0x02, 0x00, 0x00,
}

func (m *SessionCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClientGate(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintClientGate(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CGTransmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGTransmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CGTransmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buffer) > 0 {
		i -= len(m.Buffer)
		copy(dAtA[i:], m.Buffer)
		i = encodeVarintClientGate(dAtA, i, uint64(len(m.Buffer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Command != 0 {
		i = encodeVarintClientGate(dAtA, i, uint64(m.Command))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectGateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectGateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectGateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sequence != 0 {
		i = encodeVarintClientGate(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionCert != nil {
		{
			size, err := m.SessionCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectGateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectGateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectGateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleEnterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleEnterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleEnterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleUUID) > 0 {
		i -= len(m.RoleUUID)
		copy(dAtA[i:], m.RoleUUID)
		i = encodeVarintClientGate(dAtA, i, uint64(len(m.RoleUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleEnterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleEnterResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleEnterResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientToGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientToGate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientToGate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Notify != nil {
		{
			size, err := m.Notify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleEnter != nil {
		{
			size, err := m.RoleEnter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Connect != nil {
		{
			size, err := m.Connect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientGate(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientGate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovClientGate(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CGTransmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != 0 {
		n += 1 + sovClientGate(uint64(m.Command))
	}
	l = len(m.Buffer)
	if l > 0 {
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectGateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionCert != nil {
		l = m.SessionCert.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovClientGate(uint64(m.Sequence))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectGateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleEnterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleUUID)
	if l > 0 {
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleEnterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientToGate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Connect != nil {
		l = m.Connect.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.RoleEnter != nil {
		l = m.RoleEnter.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.Notify != nil {
		l = m.Notify.Size()
		n += 1 + l + sovClientGate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientGate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientGate(x uint64) (n int) {
	return sovClientGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGTransmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGTransmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGTransmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= Command(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffer = append(m.Buffer[:0], dAtA[iNdEx:postIndex]...)
			if m.Buffer == nil {
				m.Buffer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectGateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectGateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectGateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionCert == nil {
				m.SessionCert = &SessionCert{}
			}
			if err := m.SessionCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectGateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectGateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectGateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &data.Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleEnterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleEnterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleEnterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleEnterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleEnterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleEnterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientToGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientToGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientToGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connect == nil {
				m.Connect = &ConnectGateReq{}
			}
			if err := m.Connect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleEnter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleEnter == nil {
				m.RoleEnter = &RoleEnterReq{}
			}
			if err := m.RoleEnter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &CGTransmission{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notify == nil {
				m.Notify = &CGTransmission{}
			}
			if err := m.Notify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientGate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientGate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientGate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientGate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientGate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientGate = fmt.Errorf("proto: unexpected end of group")
)
