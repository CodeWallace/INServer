// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gate.proto

package data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionState int32

const (
	SessionState_Offline      SessionState = 0
	SessionState_Connected    SessionState = 1
	SessionState_Online       SessionState = 2
	SessionState_OutOfContact SessionState = 3
)

var SessionState_name = map[int32]string{
	0: "Offline",
	1: "Connected",
	2: "Online",
	3: "OutOfContact",
}

var SessionState_value = map[string]int32{
	"Offline":      0,
	"Connected":    1,
	"Online":       2,
	"OutOfContact": 3,
}

func (x SessionState) String() string {
	return proto.EnumName(SessionState_name, int32(x))
}

func (SessionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_743bb58a714d8b7d, []int{0}
}

type PlayerSessionInfo struct {
	UUID                 string         `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Address              *PlayerAddress `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	State                SessionState   `protobuf:"varint,3,opt,name=State,proto3,enum=SessionState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayerSessionInfo) Reset()         { *m = PlayerSessionInfo{} }
func (m *PlayerSessionInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerSessionInfo) ProtoMessage()    {}
func (*PlayerSessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_743bb58a714d8b7d, []int{0}
}
func (m *PlayerSessionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSessionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSessionInfo.Merge(m, src)
}
func (m *PlayerSessionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSessionInfo proto.InternalMessageInfo

func (m *PlayerSessionInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PlayerSessionInfo) GetAddress() *PlayerAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PlayerSessionInfo) GetState() SessionState {
	if m != nil {
		return m.State
	}
	return SessionState_Offline
}

type SessionCertData struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	OutOfDateTime        int64    `protobuf:"varint,2,opt,name=OutOfDateTime,proto3" json:"OutOfDateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionCertData) Reset()         { *m = SessionCertData{} }
func (m *SessionCertData) String() string { return proto.CompactTextString(m) }
func (*SessionCertData) ProtoMessage()    {}
func (*SessionCertData) Descriptor() ([]byte, []int) {
	return fileDescriptor_743bb58a714d8b7d, []int{1}
}
func (m *SessionCertData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCertData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionCertData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionCertData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCertData.Merge(m, src)
}
func (m *SessionCertData) XXX_Size() int {
	return m.Size()
}
func (m *SessionCertData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCertData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCertData proto.InternalMessageInfo

func (m *SessionCertData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SessionCertData) GetOutOfDateTime() int64 {
	if m != nil {
		return m.OutOfDateTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("SessionState", SessionState_name, SessionState_value)
	proto.RegisterType((*PlayerSessionInfo)(nil), "PlayerSessionInfo")
	proto.RegisterType((*SessionCertData)(nil), "SessionCertData")
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor_743bb58a714d8b7d) }

var fileDescriptor_743bb58a714d8b7d = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x3b, 0xcd, 0xf7, 0xb5, 0xf4, 0xf6, 0x8f, 0x71, 0x36, 0x06, 0x17, 0x21, 0x54, 0x17,
	0xd1, 0x45, 0x02, 0xf5, 0x09, 0x34, 0x59, 0x18, 0x04, 0x23, 0x89, 0xdd, 0xb8, 0x1b, 0x93, 0x1b,
	0x09, 0xd4, 0x99, 0x32, 0xb9, 0x16, 0xfa, 0x26, 0x3e, 0x92, 0x4b, 0x1f, 0x41, 0xe2, 0x8b, 0x88,
	0x93, 0x08, 0xba, 0x3b, 0xe7, 0x77, 0xb8, 0xe7, 0xc0, 0x05, 0x78, 0x12, 0x84, 0xc1, 0x56, 0x2b,
	0x52, 0xc7, 0xb3, 0xed, 0x46, 0xec, 0x51, 0x77, 0x6e, 0xb9, 0x83, 0xc3, 0x3b, 0xe3, 0x73, 0x6c,
	0x9a, 0x5a, 0xc9, 0x44, 0x56, 0x8a, 0x73, 0xf8, 0xb7, 0x5e, 0x27, 0xb1, 0xc3, 0x3c, 0xe6, 0x4f,
	0x32, 0xa3, 0xb9, 0x0f, 0xe3, 0xcb, 0xb2, 0xd4, 0xd8, 0x34, 0xce, 0xd0, 0x63, 0xfe, 0x74, 0xb5,
	0x08, 0xba, 0xc3, 0x9e, 0x66, 0x3f, 0x31, 0x3f, 0x81, 0xff, 0x39, 0x09, 0x42, 0xc7, 0xf2, 0x98,
	0xbf, 0x58, 0xcd, 0x83, 0xbe, 0xda, 0xc0, 0xac, 0xcb, 0x96, 0x09, 0x1c, 0xf4, 0x38, 0x42, 0x4d,
	0xb1, 0x20, 0xc1, 0x6d, 0xb0, 0x6e, 0x70, 0xdf, 0x8f, 0x7e, 0x4b, 0x7e, 0x0a, 0xf3, 0xf4, 0x85,
	0xd2, 0x2a, 0x16, 0x84, 0xf7, 0xf5, 0x33, 0x9a, 0x65, 0x2b, 0xfb, 0x0b, 0xcf, 0xaf, 0x61, 0xf6,
	0x7b, 0x81, 0x4f, 0x61, 0x9c, 0x56, 0xd5, 0xa6, 0x96, 0x68, 0x0f, 0xf8, 0x1c, 0x26, 0x91, 0x92,
	0x12, 0x0b, 0xc2, 0xd2, 0x66, 0x1c, 0x60, 0x94, 0x4a, 0x13, 0x0d, 0xb9, 0x0d, 0x33, 0x53, 0x14,
	0x29, 0x49, 0xa2, 0x20, 0xdb, 0xba, 0x3a, 0x7b, 0x6b, 0x5d, 0xf6, 0xde, 0xba, 0xec, 0xa3, 0x75,
	0xd9, 0xeb, 0xa7, 0x3b, 0x78, 0x38, 0x4a, 0x6e, 0x73, 0xd4, 0x3b, 0xd4, 0x61, 0xa3, 0x8b, 0xd0,
	0xbc, 0x2c, 0x2c, 0x05, 0x89, 0xc7, 0x91, 0xd1, 0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0x9b, 0xf3, 0x33, 0x5a, 0x01, 0x00, 0x00,
}

func (m *PlayerSessionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSessionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerSessionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintGate(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintGate(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionCertData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCertData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionCertData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutOfDateTime != 0 {
		i = encodeVarintGate(dAtA, i, uint64(m.OutOfDateTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGate(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGate(dAtA []byte, offset int, v uint64) int {
	offset -= sovGate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerSessionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGate(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionCertData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.OutOfDateTime != 0 {
		n += 1 + sovGate(uint64(m.OutOfDateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGate(x uint64) (n int) {
	return sovGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerSessionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSessionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSessionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &PlayerAddress{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SessionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCertData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCertData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCertData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfDateTime", wireType)
			}
			m.OutOfDateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutOfDateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGate = fmt.Errorf("proto: unexpected end of group")
)
