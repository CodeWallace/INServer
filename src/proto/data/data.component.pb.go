// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.component.proto

package data

import (
	engine "INServer/src/proto/engine"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComponentType int32

const (
	ComponentType_Invalid    ComponentType = 0
	ComponentType_Transofrm  ComponentType = 1
	ComponentType_Physics    ComponentType = 2
	ComponentType_Attribute  ComponentType = 3
	ComponentType_Move       ComponentType = 4
	ComponentType_Controller ComponentType = 5
	ComponentType_Reborn     ComponentType = 6
)

var ComponentType_name = map[int32]string{
	0: "Invalid",
	1: "Transofrm",
	2: "Physics",
	3: "Attribute",
	4: "Move",
	5: "Controller",
	6: "Reborn",
}

var ComponentType_value = map[string]int32{
	"Invalid":    0,
	"Transofrm":  1,
	"Physics":    2,
	"Attribute":  3,
	"Move":       4,
	"Controller": 5,
	"Reborn":     6,
}

func (x ComponentType) String() string {
	return proto.EnumName(ComponentType_name, int32(x))
}

func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{0}
}

type ControllerType int32

const (
	ControllerType_PlayerController ControllerType = 0
	ControllerType_AIController     ControllerType = 1
)

var ControllerType_name = map[int32]string{
	0: "PlayerController",
	1: "AIController",
}

var ControllerType_value = map[string]int32{
	"PlayerController": 0,
	"AIController":     1,
}

func (x ControllerType) String() string {
	return proto.EnumName(ControllerType_name, int32(x))
}

func (ControllerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{1}
}

type RebornType int32

const (
	RebornType_None   RebornType = 0
	RebornType_Auto   RebornType = 1
	RebornType_Manual RebornType = 2
)

var RebornType_name = map[int32]string{
	0: "None",
	1: "Auto",
	2: "Manual",
}

var RebornType_value = map[string]int32{
	"None":   0,
	"Auto":   1,
	"Manual": 2,
}

func (x RebornType) String() string {
	return proto.EnumName(RebornType_name, int32(x))
}

func (RebornType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{2}
}

type TransformComponent struct {
	Position             *engine.Vector3    `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation             *engine.Quaternion `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TransformComponent) Reset()         { *m = TransformComponent{} }
func (m *TransformComponent) String() string { return proto.CompactTextString(m) }
func (*TransformComponent) ProtoMessage()    {}
func (*TransformComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{0}
}
func (m *TransformComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformComponent.Merge(m, src)
}
func (m *TransformComponent) XXX_Size() int {
	return m.Size()
}
func (m *TransformComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformComponent.DiscardUnknown(m)
}

var xxx_messageInfo_TransformComponent proto.InternalMessageInfo

func (m *TransformComponent) GetPosition() *engine.Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *TransformComponent) GetRotation() *engine.Quaternion {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type PhysicsComponent struct {
	Mass                 float64         `protobuf:"fixed64,1,opt,name=Mass,proto3" json:"Mass,omitempty"`
	RawSpeed             *engine.Vector3 `protobuf:"bytes,2,opt,name=RawSpeed,proto3" json:"RawSpeed,omitempty"`
	PassiveSpeed         *engine.Vector3 `protobuf:"bytes,3,opt,name=PassiveSpeed,proto3" json:"PassiveSpeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PhysicsComponent) Reset()         { *m = PhysicsComponent{} }
func (m *PhysicsComponent) String() string { return proto.CompactTextString(m) }
func (*PhysicsComponent) ProtoMessage()    {}
func (*PhysicsComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{1}
}
func (m *PhysicsComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicsComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicsComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicsComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicsComponent.Merge(m, src)
}
func (m *PhysicsComponent) XXX_Size() int {
	return m.Size()
}
func (m *PhysicsComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicsComponent.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicsComponent proto.InternalMessageInfo

func (m *PhysicsComponent) GetMass() float64 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *PhysicsComponent) GetRawSpeed() *engine.Vector3 {
	if m != nil {
		return m.RawSpeed
	}
	return nil
}

func (m *PhysicsComponent) GetPassiveSpeed() *engine.Vector3 {
	if m != nil {
		return m.PassiveSpeed
	}
	return nil
}

type AttributeComponent struct {
	Speed                float32  `protobuf:"fixed32,1,opt,name=Speed,proto3" json:"Speed,omitempty"`
	HP                   float32  `protobuf:"fixed32,2,opt,name=HP,proto3" json:"HP,omitempty"`
	MaxHP                float32  `protobuf:"fixed32,3,opt,name=MaxHP,proto3" json:"MaxHP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeComponent) Reset()         { *m = AttributeComponent{} }
func (m *AttributeComponent) String() string { return proto.CompactTextString(m) }
func (*AttributeComponent) ProtoMessage()    {}
func (*AttributeComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{2}
}
func (m *AttributeComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributeComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributeComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttributeComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeComponent.Merge(m, src)
}
func (m *AttributeComponent) XXX_Size() int {
	return m.Size()
}
func (m *AttributeComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeComponent.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeComponent proto.InternalMessageInfo

func (m *AttributeComponent) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *AttributeComponent) GetHP() float32 {
	if m != nil {
		return m.HP
	}
	return 0
}

func (m *AttributeComponent) GetMaxHP() float32 {
	if m != nil {
		return m.MaxHP
	}
	return 0
}

type MoveComponent struct {
	Destination          *engine.Vector3 `protobuf:"bytes,1,opt,name=Destination,proto3" json:"Destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MoveComponent) Reset()         { *m = MoveComponent{} }
func (m *MoveComponent) String() string { return proto.CompactTextString(m) }
func (*MoveComponent) ProtoMessage()    {}
func (*MoveComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{3}
}
func (m *MoveComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveComponent.Merge(m, src)
}
func (m *MoveComponent) XXX_Size() int {
	return m.Size()
}
func (m *MoveComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveComponent.DiscardUnknown(m)
}

var xxx_messageInfo_MoveComponent proto.InternalMessageInfo

func (m *MoveComponent) GetDestination() *engine.Vector3 {
	if m != nil {
		return m.Destination
	}
	return nil
}

type ControllerComponent struct {
	ControllerType       ControllerType `protobuf:"varint,1,opt,name=ControllerType,proto3,enum=ControllerType" json:"ControllerType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ControllerComponent) Reset()         { *m = ControllerComponent{} }
func (m *ControllerComponent) String() string { return proto.CompactTextString(m) }
func (*ControllerComponent) ProtoMessage()    {}
func (*ControllerComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{4}
}
func (m *ControllerComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControllerComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControllerComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerComponent.Merge(m, src)
}
func (m *ControllerComponent) XXX_Size() int {
	return m.Size()
}
func (m *ControllerComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerComponent proto.InternalMessageInfo

func (m *ControllerComponent) GetControllerType() ControllerType {
	if m != nil {
		return m.ControllerType
	}
	return ControllerType_PlayerController
}

type RebornComponent struct {
	RebornTime           int64           `protobuf:"varint,1,opt,name=RebornTime,proto3" json:"RebornTime,omitempty"`
	RebornType           RebornType      `protobuf:"varint,2,opt,name=RebornType,proto3,enum=RebornType" json:"RebornType,omitempty"`
	Position             *engine.Vector3 `protobuf:"bytes,3,opt,name=Position,proto3" json:"Position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RebornComponent) Reset()         { *m = RebornComponent{} }
func (m *RebornComponent) String() string { return proto.CompactTextString(m) }
func (*RebornComponent) ProtoMessage()    {}
func (*RebornComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{5}
}
func (m *RebornComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebornComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebornComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebornComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebornComponent.Merge(m, src)
}
func (m *RebornComponent) XXX_Size() int {
	return m.Size()
}
func (m *RebornComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_RebornComponent.DiscardUnknown(m)
}

var xxx_messageInfo_RebornComponent proto.InternalMessageInfo

func (m *RebornComponent) GetRebornTime() int64 {
	if m != nil {
		return m.RebornTime
	}
	return 0
}

func (m *RebornComponent) GetRebornType() RebornType {
	if m != nil {
		return m.RebornType
	}
	return RebornType_None
}

func (m *RebornComponent) GetPosition() *engine.Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

type Component struct {
	Type                 ComponentType        `protobuf:"varint,1,opt,name=Type,proto3,enum=ComponentType" json:"Type,omitempty"`
	Transform            *TransformComponent  `protobuf:"bytes,2,opt,name=Transform,proto3" json:"Transform,omitempty"`
	Physics              *PhysicsComponent    `protobuf:"bytes,3,opt,name=Physics,proto3" json:"Physics,omitempty"`
	Attribute            *AttributeComponent  `protobuf:"bytes,4,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	Move                 *MoveComponent       `protobuf:"bytes,5,opt,name=Move,proto3" json:"Move,omitempty"`
	Controller           *ControllerComponent `protobuf:"bytes,6,opt,name=Controller,proto3" json:"Controller,omitempty"`
	Reborn               *RebornComponent     `protobuf:"bytes,7,opt,name=Reborn,proto3" json:"Reborn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c7ba9856f21642f, []int{6}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetType() ComponentType {
	if m != nil {
		return m.Type
	}
	return ComponentType_Invalid
}

func (m *Component) GetTransform() *TransformComponent {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *Component) GetPhysics() *PhysicsComponent {
	if m != nil {
		return m.Physics
	}
	return nil
}

func (m *Component) GetAttribute() *AttributeComponent {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *Component) GetMove() *MoveComponent {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *Component) GetController() *ControllerComponent {
	if m != nil {
		return m.Controller
	}
	return nil
}

func (m *Component) GetReborn() *RebornComponent {
	if m != nil {
		return m.Reborn
	}
	return nil
}

func init() {
	proto.RegisterEnum("ComponentType", ComponentType_name, ComponentType_value)
	proto.RegisterEnum("ControllerType", ControllerType_name, ControllerType_value)
	proto.RegisterEnum("RebornType", RebornType_name, RebornType_value)
	proto.RegisterType((*TransformComponent)(nil), "TransformComponent")
	proto.RegisterType((*PhysicsComponent)(nil), "PhysicsComponent")
	proto.RegisterType((*AttributeComponent)(nil), "AttributeComponent")
	proto.RegisterType((*MoveComponent)(nil), "MoveComponent")
	proto.RegisterType((*ControllerComponent)(nil), "ControllerComponent")
	proto.RegisterType((*RebornComponent)(nil), "RebornComponent")
	proto.RegisterType((*Component)(nil), "Component")
}

func init() { proto.RegisterFile("data.component.proto", fileDescriptor_2c7ba9856f21642f) }

var fileDescriptor_2c7ba9856f21642f = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x51, 0x6f, 0xda, 0x3c,
	0x14, 0x25, 0x81, 0x02, 0xbd, 0x94, 0xd4, 0x9f, 0x8b, 0xf4, 0xa1, 0x3d, 0xa0, 0x29, 0x9a, 0xb4,
	0x8e, 0x56, 0x46, 0x6b, 0x27, 0x6d, 0xd2, 0x9e, 0x58, 0xf7, 0x00, 0x0f, 0xa0, 0xcc, 0x45, 0x7b,
	0xd8, 0x9b, 0x01, 0x57, 0x8d, 0x44, 0x6c, 0xe4, 0x18, 0x36, 0xf6, 0xbc, 0x1f, 0xb1, 0x5f, 0x34,
	0xed, 0x71, 0x3f, 0x61, 0x62, 0x7f, 0x64, 0xb2, 0x13, 0x92, 0x40, 0xbb, 0x37, 0xe7, 0x9e, 0xe3,
	0x73, 0xee, 0xf5, 0x3d, 0x0a, 0xb4, 0xe6, 0x4c, 0x33, 0x32, 0x93, 0xd1, 0x52, 0x0a, 0x2e, 0x34,
	0x59, 0x2a, 0xa9, 0xe5, 0x13, 0x88, 0x98, 0xbe, 0x4f, 0xce, 0xfe, 0x0c, 0xf0, 0x44, 0x31, 0x11,
	0xdf, 0x49, 0x15, 0xdd, 0xec, 0x78, 0xf8, 0x19, 0xd4, 0x03, 0x19, 0x87, 0x3a, 0x94, 0xa2, 0xed,
	0x3c, 0x75, 0xce, 0x1b, 0x57, 0x75, 0xf2, 0x91, 0xcf, 0xb4, 0x54, 0xd7, 0x34, 0x43, 0xf0, 0x73,
	0xa8, 0x2b, 0xa9, 0x99, 0x65, 0xb9, 0x96, 0xd5, 0x20, 0x1f, 0x56, 0x4c, 0x73, 0x25, 0x42, 0x29,
	0x68, 0x06, 0xfa, 0x5f, 0x01, 0x05, 0xf7, 0x9b, 0x38, 0x9c, 0xc5, 0xb9, 0x05, 0x86, 0xca, 0x88,
	0xc5, 0xb1, 0x95, 0x77, 0xa8, 0x3d, 0x1b, 0x5b, 0xca, 0x3e, 0xdf, 0x2e, 0x39, 0x9f, 0xa7, 0x82,
	0x05, 0xdb, 0x1d, 0x82, 0x2f, 0xe1, 0x24, 0x60, 0x71, 0x1c, 0xae, 0x79, 0xc2, 0x2c, 0x1f, 0x30,
	0xf7, 0x50, 0x3f, 0x00, 0xdc, 0xd7, 0x5a, 0x85, 0xd3, 0x95, 0xe6, 0xb9, 0x7b, 0x0b, 0x8e, 0x92,
	0xcb, 0xc6, 0xde, 0xa5, 0xc9, 0x07, 0xf6, 0xc0, 0x1d, 0x04, 0xd6, 0xd9, 0xa5, 0xee, 0x20, 0x30,
	0xac, 0x11, 0xfb, 0x32, 0x08, 0xac, 0x85, 0x4b, 0x93, 0x0f, 0xff, 0x2d, 0x34, 0x47, 0x72, 0x5d,
	0x10, 0xeb, 0x42, 0xe3, 0x3d, 0x8f, 0x75, 0x28, 0xd8, 0xa3, 0x0f, 0x56, 0x04, 0xfd, 0x31, 0x9c,
	0xdd, 0x48, 0xa1, 0x95, 0x5c, 0x2c, 0xb8, 0xca, 0x25, 0x5e, 0x83, 0x97, 0x97, 0x27, 0x9b, 0x25,
	0xb7, 0x2a, 0xde, 0xd5, 0x29, 0xd9, 0x2f, 0xd3, 0x03, 0x9a, 0xff, 0xcd, 0x81, 0x53, 0xca, 0xa7,
	0x52, 0x89, 0x5c, 0xac, 0x03, 0x90, 0x94, 0x26, 0x61, 0x94, 0x08, 0x95, 0x69, 0xa1, 0x82, 0x2f,
	0x32, 0xdc, 0x18, 0xb9, 0xd6, 0xa8, 0x41, 0xf2, 0x12, 0x2d, 0xc0, 0x7b, 0x51, 0x28, 0xff, 0x2b,
	0x0a, 0xfe, 0x0f, 0x17, 0x8e, 0xf3, 0x06, 0x7c, 0xa8, 0x14, 0x66, 0xf0, 0x48, 0x86, 0x58, 0x75,
	0x8b, 0xe1, 0x97, 0x70, 0x9c, 0x05, 0x2f, 0x5d, 0xf6, 0x19, 0x79, 0x18, 0x45, 0x9a, 0xb3, 0xf0,
	0x05, 0xd4, 0xd2, 0x18, 0xa5, 0x9d, 0xfc, 0x47, 0x0e, 0x63, 0x45, 0x77, 0x0c, 0xa3, 0x9f, 0xed,
	0xbd, 0x5d, 0x49, 0xf5, 0x1f, 0x26, 0x81, 0xe6, 0x2c, 0xd3, 0xb6, 0x59, 0x6c, 0xfb, 0xc8, 0xb2,
	0x3d, 0xb2, 0xb7, 0x65, 0x6a, 0x31, 0xfc, 0x0a, 0x20, 0xdf, 0x40, 0xbb, 0x6a, 0x99, 0x2d, 0xf2,
	0xc8, 0x4a, 0x69, 0x81, 0x87, 0xcf, 0xa1, 0x9a, 0x3c, 0x69, 0xbb, 0x66, 0x6f, 0x20, 0x72, 0xb0,
	0x33, 0x9a, 0xe2, 0xdd, 0x08, 0x9a, 0x7b, 0xaf, 0x85, 0x1b, 0x50, 0x1b, 0x8a, 0x35, 0x5b, 0x84,
	0x73, 0x54, 0xc2, 0xcd, 0xf4, 0xd1, 0xe4, 0x9d, 0x8a, 0x90, 0x63, 0xb0, 0x74, 0x5c, 0xe4, 0x1a,
	0x2c, 0x1b, 0x05, 0x95, 0x71, 0x3d, 0x19, 0x06, 0x55, 0xb0, 0x57, 0x6c, 0x19, 0x1d, 0x61, 0xd8,
	0x35, 0x83, 0xaa, 0xdd, 0x37, 0x87, 0xb9, 0xc3, 0x2d, 0x40, 0xc1, 0x82, 0x6d, 0xcc, 0x24, 0xd9,
	0x9d, 0x12, 0x46, 0x70, 0xd2, 0x1f, 0x16, 0x2a, 0x4e, 0xf7, 0xb2, 0x18, 0x22, 0xe3, 0x36, 0x96,
	0x82, 0xa3, 0x92, 0x39, 0xf5, 0x57, 0x5a, 0x22, 0xc7, 0xf8, 0x8c, 0x98, 0x58, 0xb1, 0x05, 0x72,
	0xdf, 0xbd, 0xf8, 0xb9, 0xed, 0x38, 0xbf, 0xb6, 0x1d, 0xe7, 0xf7, 0xb6, 0xe3, 0x7c, 0xff, 0xd3,
	0x29, 0x7d, 0xfa, 0x7f, 0x38, 0xbe, 0xe5, 0x6a, 0xcd, 0x55, 0x2f, 0x56, 0xb3, 0x9e, 0xfd, 0x19,
	0xf5, 0xcc, 0xdf, 0x6a, 0x5a, 0xb5, 0xe7, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x4b,
	0xfb, 0x02, 0xbc, 0x04, 0x00, 0x00,
}

func (m *TransformComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rotation != nil {
		{
			size, err := m.Rotation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhysicsComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicsComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicsComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PassiveSpeed != nil {
		{
			size, err := m.PassiveSpeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RawSpeed != nil {
		{
			size, err := m.RawSpeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mass != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mass))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *AttributeComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributeComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttributeComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxHP != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxHP))))
		i--
		dAtA[i] = 0x1d
	}
	if m.HP != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HP))))
		i--
		dAtA[i] = 0x15
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MoveComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Destination != nil {
		{
			size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControllerComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ControllerType != 0 {
		i = encodeVarintDataComponent(dAtA, i, uint64(m.ControllerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RebornComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebornComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebornComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RebornType != 0 {
		i = encodeVarintDataComponent(dAtA, i, uint64(m.RebornType))
		i--
		dAtA[i] = 0x10
	}
	if m.RebornTime != 0 {
		i = encodeVarintDataComponent(dAtA, i, uint64(m.RebornTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reborn != nil {
		{
			size, err := m.Reborn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Controller != nil {
		{
			size, err := m.Controller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Move != nil {
		{
			size, err := m.Move.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Attribute != nil {
		{
			size, err := m.Attribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Physics != nil {
		{
			size, err := m.Physics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Transform != nil {
		{
			size, err := m.Transform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintDataComponent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransformComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Rotation != nil {
		l = m.Rotation.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhysicsComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mass != 0 {
		n += 9
	}
	if m.RawSpeed != nil {
		l = m.RawSpeed.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.PassiveSpeed != nil {
		l = m.PassiveSpeed.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttributeComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Speed != 0 {
		n += 5
	}
	if m.HP != 0 {
		n += 5
	}
	if m.MaxHP != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControllerComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControllerType != 0 {
		n += 1 + sovDataComponent(uint64(m.ControllerType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RebornComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RebornTime != 0 {
		n += 1 + sovDataComponent(uint64(m.RebornTime))
	}
	if m.RebornType != 0 {
		n += 1 + sovDataComponent(uint64(m.RebornType))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDataComponent(uint64(m.Type))
	}
	if m.Transform != nil {
		l = m.Transform.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Physics != nil {
		l = m.Physics.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Attribute != nil {
		l = m.Attribute.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Move != nil {
		l = m.Move.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Controller != nil {
		l = m.Controller.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.Reborn != nil {
		l = m.Reborn.Size()
		n += 1 + l + sovDataComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataComponent(x uint64) (n int) {
	return sovDataComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransformComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &engine.Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rotation == nil {
				m.Rotation = &engine.Quaternion{}
			}
			if err := m.Rotation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicsComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicsComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicsComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mass = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawSpeed == nil {
				m.RawSpeed = &engine.Vector3{}
			}
			if err := m.RawSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassiveSpeed == nil {
				m.PassiveSpeed = &engine.Vector3{}
			}
			if err := m.PassiveSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributeComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributeComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributeComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HP = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHP", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxHP = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &engine.Vector3{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerType", wireType)
			}
			m.ControllerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ControllerType |= ControllerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebornComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebornComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebornComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebornTime", wireType)
			}
			m.RebornTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebornTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebornType", wireType)
			}
			m.RebornType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebornType |= RebornType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &engine.Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ComponentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transform == nil {
				m.Transform = &TransformComponent{}
			}
			if err := m.Transform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Physics == nil {
				m.Physics = &PhysicsComponent{}
			}
			if err := m.Physics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attribute == nil {
				m.Attribute = &AttributeComponent{}
			}
			if err := m.Attribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Move == nil {
				m.Move = &MoveComponent{}
			}
			if err := m.Move.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Controller == nil {
				m.Controller = &ControllerComponent{}
			}
			if err := m.Controller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reborn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reborn == nil {
				m.Reborn = &RebornComponent{}
			}
			if err := m.Reborn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataComponent = fmt.Errorf("proto: unexpected end of group")
)
