// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: map.proto

package data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MapData struct {
	MapUUID              string        `protobuf:"bytes,1,opt,name=MapUUID,proto3" json:"MapUUID,omitempty"`
	LastTickTime         int64         `protobuf:"varint,2,opt,name=LastTickTime,proto3" json:"LastTickTime,omitempty"`
	Entities             []*EntityData `protobuf:"bytes,3,rep,name=Entities,proto3" json:"Entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MapData) Reset()         { *m = MapData{} }
func (m *MapData) String() string { return proto.CompactTextString(m) }
func (*MapData) ProtoMessage()    {}
func (*MapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{0}
}
func (m *MapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapData.Merge(m, src)
}
func (m *MapData) XXX_Size() int {
	return m.Size()
}
func (m *MapData) XXX_DiscardUnknown() {
	xxx_messageInfo_MapData.DiscardUnknown(m)
}

var xxx_messageInfo_MapData proto.InternalMessageInfo

func (m *MapData) GetMapUUID() string {
	if m != nil {
		return m.MapUUID
	}
	return ""
}

func (m *MapData) GetLastTickTime() int64 {
	if m != nil {
		return m.LastTickTime
	}
	return 0
}

func (m *MapData) GetEntities() []*EntityData {
	if m != nil {
		return m.Entities
	}
	return nil
}

func init() {
	proto.RegisterType((*MapData)(nil), "MapData")
}

func init() { proto.RegisterFile("map.proto", fileDescriptor_670a3ee274ba020a) }

var fileDescriptor_670a3ee274ba020a = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x4d, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x84, 0xf0, 0x94,
	0x0a, 0xb8, 0xd8, 0x7d, 0x13, 0x0b, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0x24, 0xc0, 0xcc, 0xd0, 0x50,
	0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x48, 0x89, 0x8b, 0xc7, 0x27,
	0xb1, 0xb8, 0x24, 0x24, 0x33, 0x39, 0x3b, 0x24, 0x33, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83,
	0x39, 0x08, 0x45, 0x4c, 0x48, 0x9d, 0x8b, 0xc3, 0x15, 0x64, 0x70, 0x66, 0x6a, 0xb1, 0x04, 0xb3,
	0x02, 0xb3, 0x06, 0xb7, 0x11, 0xb7, 0x1e, 0x58, 0xa0, 0x12, 0x64, 0x78, 0x10, 0x5c, 0xd2, 0x49,
	0xf3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58,
	0x8e, 0x21, 0x4a, 0xdc, 0xd3, 0x2f, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0xbf, 0xb8, 0x28, 0x59,
	0x1f, 0xec, 0x2e, 0xfd, 0x94, 0xc4, 0x92, 0xc4, 0x24, 0x36, 0x30, 0xdb, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x14, 0xf6, 0xbf, 0x10, 0xbe, 0x00, 0x00, 0x00,
}

func (m *MapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastTickTime != 0 {
		i = encodeVarintMap(dAtA, i, uint64(m.LastTickTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MapUUID) > 0 {
		i -= len(m.MapUUID)
		copy(dAtA[i:], m.MapUUID)
		i = encodeVarintMap(dAtA, i, uint64(len(m.MapUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapUUID)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	if m.LastTickTime != 0 {
		n += 1 + sovMap(uint64(m.LastTickTime))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovMap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMap(x uint64) (n int) {
	return sovMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTickTime", wireType)
			}
			m.LastTickTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTickTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &EntityData{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMap = fmt.Errorf("proto: unexpected end of group")
)
