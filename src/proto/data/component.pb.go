// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: component.proto

package data

import (
	engine "INServer/src/proto/engine"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 注意 新加的ComponentType加在Max之前
type ComponentType int32

const (
	ComponentType_Transofrm ComponentType = 0
	ComponentType_Physics   ComponentType = 1
)

var ComponentType_name = map[int32]string{
	0: "Transofrm",
	1: "Physics",
}

var ComponentType_value = map[string]int32{
	"Transofrm": 0,
	"Physics":   1,
}

func (x ComponentType) String() string {
	return proto.EnumName(ComponentType_name, int32(x))
}

func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46d0c32769b258ba, []int{0}
}

type TransformComponent struct {
	Position             *engine.Vector3    `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation             *engine.Quaternion `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TransformComponent) Reset()         { *m = TransformComponent{} }
func (m *TransformComponent) String() string { return proto.CompactTextString(m) }
func (*TransformComponent) ProtoMessage()    {}
func (*TransformComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_46d0c32769b258ba, []int{0}
}
func (m *TransformComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformComponent.Merge(m, src)
}
func (m *TransformComponent) XXX_Size() int {
	return m.Size()
}
func (m *TransformComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformComponent.DiscardUnknown(m)
}

var xxx_messageInfo_TransformComponent proto.InternalMessageInfo

func (m *TransformComponent) GetPosition() *engine.Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *TransformComponent) GetRotation() *engine.Quaternion {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type PhysicsComponent struct {
	Mass                 float32         `protobuf:"fixed32,1,opt,name=Mass,proto3" json:"Mass,omitempty"`
	RawSpeed             *engine.Vector3 `protobuf:"bytes,2,opt,name=RawSpeed,proto3" json:"RawSpeed,omitempty"`
	PassiveSpeed         *engine.Vector3 `protobuf:"bytes,3,opt,name=PassiveSpeed,proto3" json:"PassiveSpeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PhysicsComponent) Reset()         { *m = PhysicsComponent{} }
func (m *PhysicsComponent) String() string { return proto.CompactTextString(m) }
func (*PhysicsComponent) ProtoMessage()    {}
func (*PhysicsComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_46d0c32769b258ba, []int{1}
}
func (m *PhysicsComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicsComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicsComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicsComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicsComponent.Merge(m, src)
}
func (m *PhysicsComponent) XXX_Size() int {
	return m.Size()
}
func (m *PhysicsComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicsComponent.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicsComponent proto.InternalMessageInfo

func (m *PhysicsComponent) GetMass() float32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *PhysicsComponent) GetRawSpeed() *engine.Vector3 {
	if m != nil {
		return m.RawSpeed
	}
	return nil
}

func (m *PhysicsComponent) GetPassiveSpeed() *engine.Vector3 {
	if m != nil {
		return m.PassiveSpeed
	}
	return nil
}

type Component struct {
	Type                 ComponentType       `protobuf:"varint,1,opt,name=Type,proto3,enum=ComponentType" json:"Type,omitempty"`
	Transform            *TransformComponent `protobuf:"bytes,2,opt,name=Transform,proto3" json:"Transform,omitempty"`
	Physics              *PhysicsComponent   `protobuf:"bytes,3,opt,name=Physics,proto3" json:"Physics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_46d0c32769b258ba, []int{2}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetType() ComponentType {
	if m != nil {
		return m.Type
	}
	return ComponentType_Transofrm
}

func (m *Component) GetTransform() *TransformComponent {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *Component) GetPhysics() *PhysicsComponent {
	if m != nil {
		return m.Physics
	}
	return nil
}

func init() {
	proto.RegisterEnum("ComponentType", ComponentType_name, ComponentType_value)
	proto.RegisterType((*TransformComponent)(nil), "TransformComponent")
	proto.RegisterType((*PhysicsComponent)(nil), "PhysicsComponent")
	proto.RegisterType((*Component)(nil), "Component")
}

func init() { proto.RegisterFile("component.proto", fileDescriptor_46d0c32769b258ba) }

var fileDescriptor_46d0c32769b258ba = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xc7, 0xeb, 0x52, 0x41, 0x7a, 0xa1, 0x25, 0x98, 0x01, 0xc4, 0x10, 0xa1, 0x08, 0x89, 0x8f,
	0x22, 0x47, 0xb4, 0x6f, 0x00, 0x13, 0x03, 0x28, 0xb8, 0x15, 0x03, 0x9b, 0x49, 0x5d, 0x35, 0x43,
	0xec, 0xc8, 0x36, 0x45, 0xe5, 0x25, 0x58, 0x79, 0x24, 0x46, 0x1e, 0x01, 0x85, 0x17, 0x41, 0x75,
	0xf3, 0x41, 0xdb, 0xed, 0xe4, 0xff, 0x4f, 0xf7, 0xbb, 0x3b, 0xc3, 0x5e, 0x2c, 0xd3, 0x4c, 0x0a,
	0x2e, 0x0c, 0xc9, 0x94, 0x34, 0xf2, 0x18, 0x52, 0x66, 0xa6, 0xcb, 0x3a, 0x88, 0x01, 0x8f, 0x14,
	0x13, 0x7a, 0x22, 0x55, 0x7a, 0x5b, 0x72, 0xf8, 0x14, 0x9c, 0x48, 0xea, 0xc4, 0x24, 0x52, 0x1c,
	0xa1, 0x13, 0x74, 0xee, 0xf6, 0x1d, 0xf2, 0xc4, 0x63, 0x23, 0xd5, 0x80, 0x56, 0x09, 0x3e, 0x03,
	0x47, 0x49, 0xc3, 0x2c, 0xd5, 0xb4, 0x94, 0x4b, 0x1e, 0x5f, 0x99, 0xe1, 0x4a, 0x24, 0x52, 0xd0,
	0x2a, 0x0c, 0xde, 0xc1, 0x8b, 0xa6, 0x73, 0x9d, 0xc4, 0xba, 0x56, 0x60, 0x68, 0xdd, 0x33, 0xad,
	0x6d, 0xfb, 0x26, 0xb5, 0xf5, 0x42, 0x4b, 0xd9, 0xdb, 0x30, 0xe3, 0x7c, 0x5c, 0x34, 0xfc, 0xa7,
	0x2d, 0x13, 0x7c, 0x05, 0xbb, 0x11, 0xd3, 0x3a, 0x99, 0xf1, 0x25, 0xb9, 0xb5, 0x46, 0xae, 0xa4,
	0xc1, 0x07, 0x82, 0x76, 0x6d, 0x0d, 0xa0, 0x35, 0x9a, 0x67, 0xdc, 0x5a, 0xbb, 0xfd, 0x2e, 0xa9,
	0x92, 0xc5, 0x2b, 0xb5, 0x19, 0xbe, 0x86, 0x76, 0x75, 0x92, 0x62, 0x8c, 0x03, 0xb2, 0x79, 0x24,
	0x5a, 0x53, 0xb8, 0x07, 0x3b, 0xc5, 0x82, 0xc5, 0x34, 0xfb, 0x64, 0x7d, 0x61, 0x5a, 0x12, 0x97,
	0x3d, 0xe8, 0xac, 0x68, 0x71, 0xa7, 0x10, 0xca, 0x89, 0x4a, 0xbd, 0x06, 0x76, 0xab, 0x66, 0x1e,
	0xba, 0xb9, 0xf8, 0xca, 0x7d, 0xf4, 0x9d, 0xfb, 0xe8, 0x27, 0xf7, 0xd1, 0xe7, 0xaf, 0xdf, 0x78,
	0x3e, 0xbc, 0x7b, 0x18, 0x72, 0x35, 0xe3, 0x2a, 0xd4, 0x2a, 0x0e, 0xed, 0x2f, 0x86, 0x63, 0x66,
	0xd8, 0xcb, 0xb6, 0xad, 0x07, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0x1f, 0x32, 0x0a, 0xf0,
	0x01, 0x00, 0x00,
}

func (m *TransformComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rotation != nil {
		{
			size, err := m.Rotation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhysicsComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicsComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicsComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PassiveSpeed != nil {
		{
			size, err := m.PassiveSpeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RawSpeed != nil {
		{
			size, err := m.RawSpeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mass != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Mass))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Physics != nil {
		{
			size, err := m.Physics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Transform != nil {
		{
			size, err := m.Transform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintComponent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransformComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.Rotation != nil {
		l = m.Rotation.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhysicsComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mass != 0 {
		n += 5
	}
	if m.RawSpeed != nil {
		l = m.RawSpeed.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.PassiveSpeed != nil {
		l = m.PassiveSpeed.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovComponent(uint64(m.Type))
	}
	if m.Transform != nil {
		l = m.Transform.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.Physics != nil {
		l = m.Physics.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponent(x uint64) (n int) {
	return sovComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransformComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &engine.Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rotation == nil {
				m.Rotation = &engine.Quaternion{}
			}
			if err := m.Rotation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicsComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicsComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicsComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Mass = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawSpeed == nil {
				m.RawSpeed = &engine.Vector3{}
			}
			if err := m.RawSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassiveSpeed == nil {
				m.PassiveSpeed = &engine.Vector3{}
			}
			if err := m.PassiveSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ComponentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transform == nil {
				m.Transform = &TransformComponent{}
			}
			if err := m.Transform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Physics == nil {
				m.Physics = &PhysicsComponent{}
			}
			if err := m.Physics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponent = fmt.Errorf("proto: unexpected end of group")
)
